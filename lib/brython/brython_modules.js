__BRYTHON__.VFS_timestamp = 1620735502237
__BRYTHON__.use_VFS = true
var scripts = {"$timestamp": 1620735502235, "setgame.bryui": [".py", "from .cardcanvas import CardCanvas\nfrom .abstractgame import Game\nfrom .deck import Deck\nfrom .field import Field\nfrom .setkaart import SetKaart\nfrom browser import document, html, alert, bind\n\n\nclass BryUI():\n    ncards = 12\n    autoTest = None\n    autoMake = None\n    numSets = None\n    requiredCardText = None\n    requiredCard = None\n    cards = []\n    selectedCards = []\n\n    def __init__(self, game, gui_div_id, code_div_id):\n        self.game = game\n        self.root = document[gui_div_id]\n        self.code = document[code_div_id]\n        self.getCards()\n\n        document[\"button-countset\"].bind(\"click\", self.countSets)\n        document[\"button-isset\"].bind('click', self.testSet)\n        document[\"button-maakset\"].bind('click', self.makeSet)\n        document[\"canvas-field\"].bind('click', self.updateSelectedCards)\n\n    def countSets(self, event):\n        document[\"number_of_sets\"].html = self.game.telSets(self.game.field)\n\n    def getCards(self):\n        self.cards = []\n        for i in range(len(self.game.field)):\n            self.cards.append(CardCanvas(\n                None, i, \"name\"+str(i), self.game.field[i]))\n\n    def testSet(self, event):\n        sc = self.selectedCards\n        if len(sc) == 3:\n            rv = self.game.isSet(sc[0].setcard, sc[1].setcard, sc[2].setcard)\n            if rv == True:\n                msg = alert(\"Set!\")\n            else:\n                msg = alert(\"Geen set :(\")\n        else:\n            msg = alert(\"Selecteer precies 3 kaarten.\")\n\n    def makeSet(self, event):\n        sc = self.selectedCards\n        if len(sc) == 2:\n            self.requiredCard = self.game.maakSet(sc[0].setcard, sc[1].setcard)\n            self.requiredCardText = repr(self.requiredCard)\n            # self.requiredCards.append(CardCanvas(None, 12, \"name12\", self.requiredCard, element_id=\"required_cardcanvas\"))\n            document[\"required_card\"].html = self.requiredCardText\n        else:\n            msg = alert(\"Selecteer precies 2 kaarten.\")\n\n    def updateSelectedCards(self, event):\n        self.selectedCards = []\n        for cc in self.cards:\n            if cc.isSelected and isinstance(cc.setcard, SetKaart):\n                self.selectedCards.append(cc)\n        self.updateSelectedCardsText()\n\n    def updateSelectedCardsText(self):\n        sct = \"\"\n        for card in self.selectedCards:\n            sct += repr(card.setcard)+'<br>'\n        document[\"selected_cards\"].html = sct\n", ["setgame.cardcanvas", "setgame.deck", "browser.html", "setgame.deck.Deck", "setgame.abstractgame.Game", "setgame.field", "setgame.field.Field", "browser", "setgame.abstractgame", "setgame.cardcanvas.CardCanvas", "setgame.setkaart.SetKaart", "browser.document", "browser.bind", "setgame.setkaart", "setgame", "browser.alert"]], "setgame": [".py", "", [], 1], "brython_turtle": [".py", "# Revised to remove all animation. Animation rendering on multiple canvasses proved unreliable.\n#\n\n# A revised version of CPython's turtle module written for Brython\n#\n\n# Note: This version is not intended to be used in interactive mode,\n# nor use help() to look up methods/functions definitions. The docstrings\n# have thus been shortened considerably as compared with the CPython's version.\n#\n# All public methods/functions of the CPython version should exist, if only\n# to print out a warning that they are not implemented. The intent is to make\n# it easier to \"port\" any existing turtle program from CPython to the browser.\n#\n# IMPORTANT: We use SVG for drawing turtles. If we have a turtle at an angle\n# of 350 degrees and we rotate it by an additional 20 degrees, we will have\n# a turtle at an angle of 370 degrees.  For turtles drawn periodically on\n# a screen (like typical animations, including the CPython turtle module),\n# drawing a turtle with a rotation of 370 degrees is the same as a rotation of\n# 10 degrees.  However, using SVG, if we \"slowly\" animate an object,\n# rotating it from 350 to 370 degrees, the result will not be the same\n# as rotating it from 350 to 10 degrees. For this reason, we did not use the\n# Vec2D class from the CPython module and handle the rotations quite differently.\n\n\nimport math\nimport sys\n\nfrom math import cos, sin\n\nfrom browser import console, document, html, timer\nimport _svg as svg\n#import copy\n\n# Even though it is a private object, use the same name for the configuration\n# dict as the CPython's module.\n\n# Commented out configuration items are those found on the CPython version\n_CFG = {\n        # \"width\" : 0.5,               # Screen\n        # \"height\" : 0.75,\n        \"canvwidth\" : 500,\n        \"canvheight\": 500,\n        # \"leftright\": None,\n        # \"topbottom\": None,\n        \"mode\": \"standard\",\n        # \"colormode\": 1.0,\n        # \"delay\": 10,\n        # \"undobuffersize\": 1000,\n        \"shape\": \"classic\",\n        \"pencolor\" : \"black\",\n        \"fillcolor\" : \"black\",\n        # \"resizemode\" : \"noresize\",\n        \"visible\" : True,\n        # \"language\": \"english\",        # docstrings\n        # \"exampleturtle\": \"turtle\",\n        # \"examplescreen\": \"screen\",\n        # \"title\": \"Python Turtle Graphics\",\n        # \"using_IDLE\": False\n\n        # Below are configuration items specific to this version\n        \"turtle_canvas_wrapper\": None,\n        \"turtle_canvas_id\": \"turtle-canvas\",\n        \"min_duration\": \"1ms\"\n        }\n\n_cfg_copy = _CFG.copy()\n\n\ndef set_defaults(**params):\n    \"\"\"Allows to override defaults.\"\"\"\n    _CFG.update(**params)\n    Screen().reset()\n\n\nclass FormattedTuple(tuple):\n    '''used to give a nicer representation of the position'''\n    def __new__(cls, x, y):\n        return tuple.__new__(cls, (x, y))\n    def __repr__(self):\n        return \"(%.2f, %.2f)\" % self\n\ndef create_circle(r):\n    '''Creates a circle of radius r centered at the origin'''\n    circle = svg.circle(x=0, y=0, r=r, stroke=\"black\", fill=\"black\")\n    circle.setAttribute(\"stroke-width\", 1)\n    return circle\n\n\ndef create_polygon(points):\n    '''Creates a polygon using the points provided'''\n    points = [\"%s,%s \" % (x, y) for x, y in points]\n    polygon = svg.polygon(points=points, stroke=\"black\", fill=\"black\")\n    polygon.setAttribute(\"stroke-width\", 1)\n    return polygon\n\n\ndef create_rectangle(width=2, height=2, rx=None, ry=None):\n    '''Creates a rectangle centered at the origin. rx and ry can be\n       used to have rounded corners'''\n    rectangle = svg.rect(x=-width / 2, y=-height / 2, width=width,\n                         height=height, stroke=\"black\", fill=\"black\")\n    rectangle.setAttribute(\"stroke-width\", 1)\n    if rx is not None:\n        rectangle.setAttribute(\"rx\", rx)\n    if ry is not None:\n        rectangle.setAttribute(\"ry\", ry)\n    return rectangle\n\n\ndef create_square(size=2, r=None):\n    '''Creates a square centered at the origin. rx and ry can be\n       used to have rounded corners'''\n    return create_rectangle(width=size, height=size, rx=r, ry=r)\n\n\nclass TurtleGraphicsError(Exception):\n    \"\"\"Some TurtleGraphics Error\n    \"\"\"\n    pass\n\n\nclass Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass Screen(metaclass=Singleton):\n\n    def __init__(self):\n        self.shapes = {\n            'arrow': (create_polygon, ((-10, 0), (10, 0), (0, 10))),\n            'turtle': (create_polygon, ((0, 16), (-2, 14), (-1, 10), (-4, 7),\n                        (-7, 9), (-9, 8), (-6, 5), (-7, 1), (-5, -3), (-8, -6),\n                        (-6, -8), (-4, -5), (0, -7), (4, -5), (6, -8), (8, -6),\n                        (5, -3), (7, 1), (6, 5), (9, 8), (7, 9), (4, 7), (1, 10),\n                        (2, 14))),\n            'classic': (create_polygon, ((0, 0), (-5, -9), (0, -7), (5, -9))),\n            'triangle': (create_polygon, ((10, -5.77), (0, 11.55), (-10, -5.77))),\n            'square': (create_square, 20),\n            'circle': (create_circle, 10)\n        }\n        self.reset()\n        self._set_geometry()\n\n    def bgcolor(self, color=None):\n        \"\"\"sets the background with the given color if color is not None,\n        else return current background color.\n        \"\"\"\n        if color is None:\n            return self.background_color\n        self.background_color = color\n        width = _CFG['canvwidth']\n        height = _CFG['canvheight']\n        if self.mode() in ['logo', 'standard']:\n            x = -width // 2\n            y = -height // 2\n        else:\n            x = 0\n            y = -height\n\n        self.frame_index += 1\n        rect = svg.rect(x=x, y=y, width=width, height=height, fill=color,\n                            style={'display': 'block'})\n        # an = svg.animate(Id=\"animation_frame%s\" % self.frame_index,\n        #                       attributeName=\"display\", attributeType=\"CSS\",\n        #                       From=\"block\", to=\"block\",\n        #                       dur=_CFG[\"min_duration\"], fill='freeze')\n        # an.setAttribute('begin', \"animation_frame%s.end\" % (self.frame_index - 1))\n        # rect <= an\n\n        self.background_canvas <= rect\n\n    def _convert_coordinates(self, x, y):\n        \"\"\"In the browser, the increasing y-coordinate is towards the\n           bottom of the screen; this is the opposite of what is assumed\n           normally for the methods in the CPython turtle module.\n\n           This method makes the necessary orientation. It should be called\n           just prior to creating any SVG element.\n        \"\"\"\n        return x * self.yscale, self.y_points_down * y * self.yscale\n\n\n    def create_svg_turtle(self, _turtle, name):\n        if name in self.shapes:\n            fn = self.shapes[name][0]\n            arg = self.shapes[name][1]\n        else:\n            print(\"Unknown turtle '%s'; the default turtle will be used\")\n            fn = self.shapes[_CVG[\"shape\"]][0]\n            arg = self.shapes[_CVG[\"shape\"]][1]\n        shape = fn(arg)\n        if self._mode == 'standard' or self._mode == 'world':\n            rotation = -90\n        else:\n            rotation = 0\n        return shape, rotation\n\n    def _dot(self, pos, size, color):\n        \"\"\"Draws a filled circle of specified size and color\"\"\"\n        if color is None:\n            color = 'black'\n        if size is None or size < 1:\n            size = 1\n        self.frame_index += 1\n\n        x, y = self._convert_coordinates(pos[0], pos[1])\n\n        circle = svg.circle(cx=x, cy=y, r=size, fill=color,\n                            style={'display': 'block'})\n        # an = svg.animate(Id=\"animation_frame%s\" % self.frame_index,\n        #                       attributeName=\"display\", attributeType=\"CSS\",\n        #                       From=\"block\", to=\"block\",\n        #                       dur=_CFG[\"min_duration\"], fill='freeze')\n        # an.setAttribute('begin', \"animation_frame%s.end\" % (self.frame_index - 1))\n        # circle <= an\n        self.canvas <= circle\n\n    def _drawline(self, _turtle, coordlist=None,\n                  color=None, width=1, speed=None):\n        \"\"\"Draws an animated line with a turtle\n            - coordlist is the egin and end coordinates of the line\n            - color should include the current outline and fill colors;\n            - width is width of line to be drawn.\n            - speed is the animation speed\n        \"\"\"\n\n        outline = color[0]\n        fill = color[1]\n\n        x0, y0 = coordlist[0]\n        x1, y1 = coordlist[1]\n\n        x0, y0 = self._convert_coordinates(x0, y0)\n        x1, y1 = self._convert_coordinates(x1, y1)\n\n        # The speed scale does not correspond exactly to the CPython one...\n        if speed == 0:\n            duration = _CFG[\"min_duration\"]\n        else:\n            dist = _turtle._distance\n            if speed is None or speed == 1:\n                duration = 0.02 * dist\n            else:\n                duration = 0.02 * dist / speed ** 1.2\n            if duration < 0.001:\n                duration = _CFG[\"min_duration\"]\n            else:\n                duration = \"%6.3fs\" % duration\n\n        drawing = _turtle._drawing\n\n        _line = svg.line(x1=x0, y1=y0, x2=x0, y2=y0,\n                          style={'stroke': outline, 'stroke-width': width})\n        if not drawing:\n            _line.setAttribute('opacity', 0)\n\n        # always create one animation for timing purpose\n        begin = \"animation_frame%s.end\" % self.frame_index\n        self.frame_index += 1\n        # _an1 = svg.animate(Id=\"animation_frame%s\" % self.frame_index,\n        #                     attributeName=\"x2\", attributeType=\"XML\",\n        #                     From=x0, to=x1, dur=duration, fill='freeze',\n        #                     begin=begin)\n        # _line <= _an1\n\n        ## But, do not bother adding animations that will not be shown.\n        if drawing:\n            # _an2 = svg.animate(attributeName=\"y2\", attributeType=\"XML\",\n            #                 begin=begin,\n            #                 From=y0, to=y1, dur=duration, fill='freeze')\n            # _line <= _an2\n\n            if width > 2:\n                _line_cap = svg.set(attributeName=\"stroke-linecap\",\n                    begin=begin,\n                    attributeType=\"xml\", to=\"round\", dur=duration, fill='freeze')\n                _line <= _line_cap\n\n        self.canvas <= _line\n        return begin, duration, (x0, y0), (x1, y1)\n\n    def _drawpoly(self, coordlist, outline=None, fill=None, width=None):\n        \"\"\"Draws a path according to provided arguments:\n            - coordlist is sequence of coordinates\n            - fill is filling color\n            - outline is outline color\n            - width is the outline width\n        \"\"\"\n        self.frame_index += 1\n        shape = [\"%s,%s\" % self._convert_coordinates(x, y) for x, y in coordlist]\n\n        style = {'display': 'block'}\n        if fill is not None:\n            style['fill'] = fill\n        if outline is not None:\n            style['stroke'] = outline\n            if width is not None:\n                style['stroke-width'] = width\n            else:\n                style['stroke-width'] = 1\n\n        polygon = svg.polygon(points=\" \".join(shape), style=style)\n\n        # an = svg.animate(Id=\"animation_frame%s\" % self.frame_index,\n        #                       attributeName=\"display\", attributeType=\"CSS\",\n        #                       From=\"block\", to=\"block\",\n        #                       dur=_CFG[\"min_duration\"], fill='freeze')\n\n        # an.setAttribute('begin', \"animation_frame%s.end\" % (self.frame_index-1))\n        # polygon <= an\n        self.canvas <= polygon\n\n\n    def _new_frame(self):\n        '''returns a new animation frame index and update the current indes'''\n\n        previous_end = \"animation_frame%s.end\" % self.frame_index\n        self.frame_index += 1\n        new_frame_id = \"animation_frame%s\" % self.frame_index\n        return previous_end, new_frame_id\n\n    def mode(self, _mode=None):\n        if _mode is None:\n            return self._mode\n        _CFG['mode'] = _mode\n        self.reset()\n\n\n    def reset(self):\n        self._turtles = []\n        self.frame_index = 0\n        self.background_color = \"white\"\n        self._set_geometry()\n\n    def _set_geometry(self):\n        self.width = _CFG[\"canvwidth\"]\n        self.height = _CFG[\"canvheight\"]\n        self.x_offset = self.y_offset = 0\n        self.xscale = self.yscale = 1\n\n        self.y_points_down = -1\n        self._mode = _CFG[\"mode\"].lower()\n        if self._mode in ['logo', 'standard']:\n            self.translate_canvas = (self.width // 2, self.height // 2)\n        elif self._mode == 'world':\n            self.translate_canvas = (0, self.height)\n        self._setup_canvas()\n\n    def _setup_canvas(self):\n        self.svg_scene = svg.svg(Id=_CFG[\"turtle_canvas_id\"], width=self.width,\n                             height=self.height)\n        translate = \"translate(%d %d)\" % self.translate_canvas\n\n        # always create one animation for timing purpose\n        # self.svg_scene <= svg.animate(\n        #     Id=\"animation_frame%s\" % self.frame_index,\n        #     attributeName=\"width\", attributeType=\"CSS\",\n        #     From=self.width, to=self.width, begin=\"0s\",\n        #     dur=_CFG[\"min_duration\"], fill='freeze')\n\n        # Unlike html elements, svg elements have no concept of a z-index: each\n        # new element is drawn on top of each other.\n        # Having separate canvas keeps the ordering\n        self.background_canvas = svg.g(transform=translate)\n        self.canvas = svg.g(transform=translate)\n        self.writing_canvas = svg.g(transform=translate)\n        self.turtle_canvas = svg.g(transform=translate)\n\n        self.svg_scene <= self.background_canvas\n        self.svg_scene <= self.canvas\n        self.svg_scene <= self.writing_canvas\n        self.svg_scene <= self.turtle_canvas\n\n\n    def setworldcoordinates(self, llx, lly, urx, ury):\n        \"\"\"Set up a user defined coordinate-system.\n\n        Arguments:\n        llx -- a number, x-coordinate of lower left corner of canvas\n        lly -- a number, y-coordinate of lower left corner of canvas\n        urx -- a number, x-coordinate of upper right corner of canvas\n        ury -- a number, y-coordinate of upper right corner of canvas\n\n        Note: llx must be less than urx in this version.\n\n        Warning: in user-defined coordinate systems angles may appear distorted.\n        \"\"\"\n        self._mode = \"world\"\n\n        if urx < llx:\n            sys.stderr.write(\"Warning: urx must be greater than llx; your choice will be reversed\")\n            urx, llx = llx, urx\n        xspan = urx - llx\n        yspan = abs(ury - lly)\n\n        self.xscale = int(self.width) / xspan\n        self.yscale = int(self.height) / yspan\n        self.x_offset = -llx * self.xscale\n        if ury < lly:\n            self.y_points_down = 1 # standard orientation in the browser\n        else:\n            self.y_points_down = -1\n        self.y_offset = self.y_points_down * lly * self.yscale\n        self.translate_canvas = (self.x_offset, self.height - self.y_offset)\n        self._setup_canvas()\n\n    def show_scene(self):\n        '''Ends the creation of a \"scene\" and has it displayed'''\n\n        for t in self._turtles:\n            self.turtle_canvas <= t.svg\n        if _CFG[\"turtle_canvas_wrapper\"] is None:\n            _CFG[\"turtle_canvas_wrapper\"] = html.DIV(Id=\"turtle-canvas-wrapper\")\n            document <= _CFG[\"turtle_canvas_wrapper\"]\n        if _CFG[\"turtle_canvas_id\"] not in document:\n            _CFG[\"turtle_canvas_wrapper\"] <= self.svg_scene\n        def set_svg():\n        # need to have a delay for chrome so that first few draw commands are viewed properly.\n            _CFG[\"turtle_canvas_wrapper\"].html = _CFG[\"turtle_canvas_wrapper\"].html\n        timer.set_timeout(set_svg, 1)\n\n\n    def turtles(self):\n        \"\"\"Return the list of turtles on the screen.\n        \"\"\"\n        return self._turtles\n\n    def _write(self, pos, txt, align, font, color):\n        \"\"\"Write txt at pos in canvas with specified font\n        and color.\"\"\"\n        if isinstance(color, tuple):\n            stroke = color[0]\n            fill = color[1]\n        else:\n            fill = color\n            stroke = None\n        x, y = self._convert_coordinates(pos[0], pos[1])\n        text = svg.text(txt, x=x, y=y, fill=fill,\n                        style={'display': 'none',\n                               'font-family': font[0],\n                               'font-size': font[1],\n                               'font-style': font[2]})\n\n        if stroke is not None:\n            text.setAttribute('stroke', stroke)\n        if align == 'left':\n            text.setAttribute('text-anchor', 'start')\n        elif align == 'center' or align == 'centre':\n            text.setAttribute('text-anchor', 'middle')\n        elif align == 'right':\n            text.setAttribute('text-anchor', 'end')\n\n        self.frame_index += 1\n        # an = svg.animate(Id=\"animation_frame%s\" % self.frame_index,\n        #                       attributeName=\"display\", attributeType=\"CSS\",\n        #                       From=\"block\", to=\"block\", \n        #                       dur=_CFG[\"min_duration\"], fill='freeze')\n        # an.setAttribute('begin', \"animation_frame%s.end\" % (self.frame_index - 1))\n        # text <= an\n        self.writing_canvas <= text\n\n    def addshape(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.addshape() is not implemented.\\n\")\n\n    def bgpic(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.bgpic() is not implemented.\\n\")\n\n    def bye(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.bye() is not implemented.\\n\")\n\n    def clearscreen(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.clearscreen() is not implemented.\\n\")\n\n    def colormode(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.colormode() is not implemented.\\n\")\n\n    def delay(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.delay() is not implemented.\\n\")\n\n    def exitonclick(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.exitonclick() is not implemented.\\n\")\n\n    def getcanvas(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.getcanvas() is not implemented.\\n\")\n\n    def getshapes(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.getshapes() is not implemented.\\n\")\n\n    def addshape(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.addshape() is not implemented.\\n\")\n\n    def listen(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.listen() is not implemented.\\n\")\n\n    def mainloop(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.mainloop() is not implemented.\\n\")\n\n    def numinput(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.numinput() is not implemented.\\n\")\n\n    def onkey(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.onkey() is not implemented.\\n\")\n\n    def onkeypress(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.onkeypress() is not implemented.\\n\")\n\n    def onkeyrelease(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.onkeyrelease() is not implemented.\\n\")\n\n    def onscreenclick(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.onscreenclick() is not implemented.\\n\")\n\n    def ontimer(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.ontimer() is not implemented.\\n\")\n\n    def register_shape(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.register_shape() is not implemented.\\n\")\n\n    def resetscreen(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.resetscreen() is not implemented.\\n\")\n\n    def screensize(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.screensize() is not implemented.\\n\")\n\n    def setup(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.setup() is not implemented.\\n\")\n\n    def textinput(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.textinput() is not implemented.\\n\")\n\n    def title(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.title() is not implemented.\\n\")\n\n    def tracer(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.tracer() is not implemented.\\n\")\n\n    def update(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.update() is not implemented.\\n\")\n\n    def window_height(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.window_height() is not implemented.\\n\")\n\n    def window_width(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Screen.window_width() is not implemented.\\n\")\n\n\nclass TNavigator:\n    \"\"\"Navigation part of the Turtle.\n    Implements methods for turtle movement.\n    \"\"\"\n    # START_ORIENTATION = {\n    #     \"standard\": Vec2D(1.0, 0.0),\n    #     \"world\": Vec2D(1.0, 0.0),\n    #     \"logo\": Vec2D(0.0, 1.0)}\n    DEFAULT_MODE = \"standard\"\n    DEFAULT_ANGLEOFFSET = 0\n    DEFAULT_ANGLEORIENT = 1\n\n    def __init__(self, mode=DEFAULT_MODE):\n        self._angleOffset = self.DEFAULT_ANGLEOFFSET\n        self._angleOrient = self.DEFAULT_ANGLEORIENT\n        self._mode = mode\n        self.degree_to_radians = math.pi / 180\n        self.degrees()\n        self._mode = _CFG['mode']\n        self._setmode(mode)\n        TNavigator.reset(self)\n\n    def reset(self):\n        \"\"\"reset turtle navigation to its initial values\n\n        The derived class, which will call it directly and add its own\n        \"\"\"\n        self._position = (0.0, 0.0)\n        self._x = 0\n        self._y = 0\n        self._angle = 0\n        self._old_heading = 0\n\n    def _setmode(self, mode=None):\n        \"\"\"Set turtle-mode to 'standard', 'world' or 'logo'.\n        \"\"\"\n        if mode is None:\n            return self._mode\n        if mode not in [\"standard\", \"logo\", \"world\"]:\n            print(mode, \"is an unknown mode; it will be ignored.\")\n            return\n        self._mode = mode\n        if mode in [\"standard\", \"world\"]:\n            self._angleOffset = 0\n            self._angleOrient = 1\n        else:  # mode == \"logo\":\n            self._angleOffset = -self._fullcircle / 4.\n            self._angleOrient = 1\n\n    def _setDegreesPerAU(self, fullcircle):\n        \"\"\"Helper function for degrees() and radians()\"\"\"\n        self._fullcircle = fullcircle\n        self._degreesPerAU = 360 / fullcircle\n\n    def degrees(self, fullcircle=360.0):\n        \"\"\" Set angle measurement units to degrees, or possibly other system.\n        \"\"\"\n        self._setDegreesPerAU(fullcircle)\n\n    def radians(self):\n        \"\"\" Set the angle measurement units to radians.\n        \"\"\"\n        self._setDegreesPerAU(2 * math.pi)\n\n    def _rotate(self, angle):\n        \"\"\"Turn turtle counterclockwise by specified angle if angle > 0.\"\"\"\n        pass\n\n    def _goto(self, x, y):\n        pass  # implemented by derived class\n\n    def forward(self, distance):\n        \"\"\"Move the turtle forward by the specified distance.\n        \"\"\"\n        x1 = distance * cos(self._angle * self.degree_to_radians)\n        y1 = distance * sin(self._angle * self.degree_to_radians)\n        self._distance = distance\n        self._goto(self._x + x1, self._y + y1)\n    fd = forward\n\n    def back(self, distance):\n        \"\"\"Move the turtle backward by distance.\n        \"\"\"\n        x1 = -distance * cos(self._angle * self.degree_to_radians)\n        y1 = -distance * sin(self._angle * self.degree_to_radians)\n        self._distance = distance\n        self._goto(self._x + x1, self._y + y1)\n    backward = back\n    bk = back\n\n    def right(self, angle):\n        \"\"\"Turn turtle right by angle units.\n        \"\"\"\n        angle *= self._degreesPerAU\n        self._angle += self.screen.y_points_down * angle\n        self._rotate_image(-angle)\n    rt = right\n\n    def left(self, angle):\n        \"\"\"Turn turtle left by angle units.\n        \"\"\"\n        angle *= self._degreesPerAU\n        self._angle += -self.screen.y_points_down * angle\n        self._rotate_image(angle)\n    lt = left\n\n    def pos(self):\n        \"\"\"Return the turtle's current location (x,y), as a formatted tuple\n        \"\"\"\n        return FormattedTuple(self._x, self._y)\n    position = pos\n\n    def xcor(self):\n        \"\"\" Return the turtle's x coordinate.\n        \"\"\"\n        return self._x\n\n    def ycor(self):\n        \"\"\" Return the turtle's y coordinate\n        \"\"\"\n        return self._y\n\n    def goto(self, x, y=None):\n        \"\"\"Move turtle to an absolute position.\n        \"\"\"\n        if y is None:\n            x, y = x[0], x[1] # \"*x\" here raises SyntaxError\n        # distance only needed to calculate the duration of\n        # the animation which is based on \"distance\" and \"speed\" as well.\n        # We use the Manhattan distance here as it is *much* faster on Chrome,\n        # than using the proper distance with calls to math.sqrt, while\n        # giving acceptable results\n        #\n        # forward, backward, etc., call _goto directly with the distance\n        # given by the user\n        self._distance = abs(self._x - x) + abs(self._y - y)\n        self._goto(x, y)\n    setpos = goto\n    setposition = goto\n\n\n    def home(self):\n        \"\"\"Move turtle to the origin - coordinates (0,0), facing in the\n           default orientation\n        \"\"\"\n        self.goto(0, 0)\n        self.setheading(0)\n\n    def setx(self, x):\n        \"\"\"Set the turtle's first coordinate to x\n        \"\"\"\n        self._distance = abs(x - self._x)\n        self._goto(x, self._y)\n\n    def sety(self, y):\n        \"\"\"Set the turtle's second coordinate to y\n        \"\"\"\n        self._distance = abs(y - self._y)\n        self._goto(self._x, y)\n\n    def distance(self, x, y=None):\n        \"\"\"Return the distance from the turtle to (x,y) in turtle step units.\n        \"\"\"\n        if y is None:\n            assert isinstance(x, tuple)\n            x, y = x\n        return math.sqrt((self._x - x) ** 2 + (self._y - y) ** 2)\n\n    def towards(self, x, y=None):\n        \"\"\"Return the angle of the line from the turtle's position to (x, y).\n        \"\"\"\n        if y is None:\n            assert isinstance(x, tuple)\n            x, y = x\n        x, y = x - self._x, y - self._y\n        result = round(math.atan2(y, x) * 180.0 / math.pi, 10) % 360.0\n        result /= self._degreesPerAU\n        return (self._angleOffset + self._angleOrient * result) % self._fullcircle\n\n    def heading(self):\n        \"\"\" Return the turtle's current heading.\n        \"\"\"\n        angle = self._angle / self._degreesPerAU\n        return (self._angleOffset + self._angleOrient*angle) % self._fullcircle\n\n    def setheading(self, to_angle):\n        \"\"\"Set the orientation of the turtle to to_angle.\n        \"\"\"\n        self._rotate(to_angle - self._angle)\n    seth = setheading\n\n    def circle(self, radius, extent=None, steps=None):\n        \"\"\" Draw an approximate (arc) circle with given radius, using straight\n            line segments.\n\n        Arguments:\n        radius -- a number\n        extent (optional) -- a number\n        steps (optional) -- an integer\n\n        Draw a circle with given radius. The center is radius units left\n        of the turtle; extent - an angle - determines which part of the\n        circle is drawn. If extent is not given, draw the entire circle.\n        If extent is not a full circle, one endpoint of the arc is the\n        current pen position. Draw the arc in counterclockwise direction\n        if radius is positive, otherwise in clockwise direction. Finally\n        the direction of the turtle is changed by the amount of extent.\n\n        As the circle is approximated by an inscribed regular polygon,\n        steps determines the number of steps to use. If not given,\n        it will be calculated automatically. Maybe used to draw regular\n        polygons.\n        \"\"\"\n        speed = self.speed()\n        if extent is None:\n            extent = self._fullcircle\n        if steps is None:\n            frac = abs(extent)/self._fullcircle\n            steps = 1+int(min(11 + abs(radius) / 6.0, 59.0) * frac)\n        w = 1.0 * extent / steps\n        w2 = 0.5 * w\n        l = 2.0 * radius * math.sin(w2 * math.pi / 180.0 * self._degreesPerAU)\n        if radius < 0:\n            l, w, w2 = -l, -w, -w2\n        self._rotate(w2)\n        for i in range(steps):\n            self.speed(speed)\n            self.forward(l)\n            self.speed(0)\n            self._rotate(w)\n        self._rotate(-w2)\n        self.speed(speed)\n\nclass TPen:\n    \"\"\"Drawing part of the Turtle.\n    \"\"\"\n\n    def __init__(self):\n        TPen._reset(self)\n\n    def _reset(self, pencolor=_CFG[\"pencolor\"],\n               fillcolor=_CFG[\"fillcolor\"]):\n        self._pensize = 1\n        self._shown = True\n        self._drawing = True\n        self._pencolor = 'black'\n        self._fillcolor = 'black'\n        self._speed = 3\n        self._stretchfactor = (1., 1.)\n\n\n    def resizemode(self, rmode=None):\n        sys.stderr.write(\"Warning: TPen.resizemode() is not implemented.\\n\")\n\n    def pensize(self, width=None):\n        \"\"\"Set or return the line thickness.\n        \"\"\"\n        if width is None:\n            return self._pensize\n        self.pen(pensize=width)\n    width = pensize\n\n    def pendown(self):\n        \"\"\"Pull the pen down -- drawing when moving.\n        \"\"\"\n        if self._drawing:\n            return\n        self.pen(pendown=True)\n    pd = pendown\n    down = pendown\n\n    def penup(self):\n        \"\"\"Pull the pen up -- no drawing when moving.\n        \"\"\"\n        if not self._drawing:\n            return\n        self.pen(pendown=False)\n    pu = penup\n    up = penup\n\n    def isdown(self):\n        \"\"\"Return True if pen is down, False if it's up.\n        \"\"\"\n        return self._drawing\n\n    def speed(self, speed=None):\n        \"\"\" Return or set the turtle's speed.\n\n        Optional argument:\n        speed -- an integer in the range 0..10 or a speedstring (see below)\n\n        Set the turtle's speed to an integer value in the range 0 .. 10.\n        If no argument is given: return current speed.\n\n        If input is a number greater than 10 or smaller than 0.5,\n        speed is set to 0.\n        Speedstrings  are mapped to speedvalues in the following way:\n            'fastest' :  0\n            'fast'    :  10\n            'normal'  :  6\n            'slow'    :  3\n            'slowest' :  1\n        speeds from 1 to 10 enforce increasingly faster animation of\n        line drawing and turtle turning.\n\n        Attention:\n        speed = 0 : *no* animation takes place. forward/back makes turtle jump\n        and likewise left/right make the turtle turn instantly.\n        \"\"\"\n        speeds = {'fastest': 0, 'fast': 10, 'normal': 6, 'slow': 3, 'slowest': 1}\n        if speed is None:\n            return self._speed\n        if speed in speeds:\n            speed = speeds[speed]\n        elif 0.5 < speed < 10.5:\n            speed = int(round(speed))\n        else:\n            speed = 0\n        self.pen(speed=speed)\n\n    def color(self, *args):\n        \"\"\"Return or set the pencolor and fillcolor.\n\n        IMPORTANT: this is very different than the CPython's version.\n\n        Colors are using strings in any format recognized by a browser\n        (named color, rgb, rgba, hex, hsl, etc.)\n\n        Acceptable arguments:\n\n            no argument: returns (pencolor, fillcolor)\n            single string -> sets both pencolor and fillcolor to that value\n            two string arguments -> taken to be pencolor, fillcolor\n            tuple of two strings -> taken to be (pencolor, fillcolor)\n        \"\"\"\n        if args:\n            l = len(args)\n            if l == 1:\n                if isinstance(args[0], tuple):\n                    pencolor = args[0][0]\n                    fillcolor = args[0][1]\n                else:\n                    pencolor = fillcolor = args[0]\n            elif l == 2:\n                pencolor, fillcolor = args\n\n            if not isinstance(pencolor, str) or not isinstance(fillcolor, str):\n                raise TurtleGraphicsError(\"bad color arguments: %s\" % str(args))\n\n            self.pen(pencolor=pencolor, fillcolor=fillcolor)\n        else:\n            return self._pencolor, self._fillcolor\n\n    def pencolor(self, color=None):\n        \"\"\" Return or set the pencolor.\n\n        IMPORTANT: this is very different than the CPython's version.\n\n        Colors are using strings in any format recognized by a browser\n        (named color, rgb, rgba, hex, hsl, etc.)\n        \"\"\"\n        if color is not None:\n            if not isinstance(color, str):\n                raise TurtleGraphicsError(\"bad color arguments: %s\" % str(color))\n            if color == self._pencolor:\n                return\n            self.pen(pencolor=color)\n        else:\n            return self._pencolor\n\n    def fillcolor(self, color=None):\n        \"\"\" Return or set the fillcolor.\n\n        IMPORTANT: this is very different than the CPython's version.\n\n        Colors are using strings in any format recognized by a browser\n        (named color, rgb, rgba, hex, hsl, etc.)\n        \"\"\"\n        if color is not None:\n            if not isinstance(color, str):\n                raise TurtleGraphicsError(\"bad color arguments: %s\" % str(color))\n            if color == self._fillcolor:\n                return\n            self.pen(fillcolor=color)\n        else:\n            return self._pencolor\n\n    def showturtle(self):\n        \"\"\"Makes the turtle visible.\n        \"\"\"\n        if self._shown:\n            return\n        self.pen(shown=True)\n        self.left(0) # this will update the display to the correct rotation\n    st = showturtle\n\n    def hideturtle(self):\n        \"\"\"Makes the turtle invisible.\n        \"\"\"\n        if self._shown:\n            self.pen(shown=False)\n    ht = hideturtle\n\n    def isvisible(self):\n        \"\"\"Return True if the Turtle is shown, False if it's hidden.\n        \"\"\"\n        return self._shown\n\n    def pen(self, pen=None, **pendict):\n        \"\"\"Return or set the pen's attributes.\n\n        Arguments:\n            pen -- a dictionary with some or all of the below listed keys.\n            **pendict -- one or more keyword-arguments with the below\n                         listed keys as keywords.\n\n        Return or set the pen's attributes in a 'pen-dictionary'\n        with the following key/value pairs:\n           \"shown\"      :   True/False\n           \"pendown\"    :   True/False\n           \"pencolor\"   :   color-string or color-tuple\n           \"fillcolor\"  :   color-string or color-tuple\n           \"pensize\"    :   positive number\n           \"speed\"      :   number in range 0..10\n        \"\"\"\n        _pd = {\"shown\": self._shown,\n               \"pendown\": self._drawing,\n               \"pencolor\": self._pencolor,\n               \"fillcolor\": self._fillcolor,\n               \"pensize\": self._pensize,\n               \"speed\": self._speed\n               }\n\n        if not (pen or pendict):\n            return _pd\n\n        if isinstance(pen, dict):\n            p = pen\n        else:\n            p = {}\n        p.update(pendict)\n\n        _p_buf = {}\n        for key in p:\n            _p_buf[key] = _pd[key]\n        if \"pendown\" in p:\n            self._drawing = p[\"pendown\"]\n        if \"pencolor\" in p:\n            old_color = self._pencolor\n            self._pencolor = p[\"pencolor\"]\n            previous_end, new_frame_id = self.screen._new_frame()\n            # anim = svg.animate(Id=new_frame_id, begin=previous_end,\n            #                    dur=_CFG[\"min_duration\"], fill=\"freeze\",\n            #                    attributeName=\"stroke\", attributeType=\"XML\",\n            #                    From=old_color, to=self._pencolor)\n            # self.svg <= anim\n        if \"pensize\" in p:\n            self._pensize = p[\"pensize\"]\n        if \"fillcolor\" in p:\n            old_color = self._fillcolor\n            self._fillcolor = p[\"fillcolor\"]\n            previous_end, new_frame_id = self.screen._new_frame()\n            # anim = svg.animate(Id=new_frame_id, begin=previous_end,\n            #                    dur=_CFG[\"min_duration\"], fill=\"freeze\",\n            #                    attributeName=\"fill\", attributeType=\"XML\",\n            #                    From=old_color, to=self._fillcolor)\n            # self.svg <= anim\n        if \"speed\" in p:\n            self._speed = p[\"speed\"]\n        if \"shown\" in p:\n            old_shown = self._shown\n            if old_shown:\n                opacity = 0\n                old_opacity = 1\n            else:\n                opacity = 1\n                old_opacity = 0\n            previous_end, new_frame_id = self.screen._new_frame()\n            # anim = svg.animate(Id=new_frame_id, begin=previous_end,\n            #                    dur=_CFG[\"min_duration\"], fill=\"freeze\",\n            #                    attributeName=\"opacity\", attributeType=\"XML\",\n            #                    From=old_opacity, to=opacity)\n            # self.svg <= anim\n            self.forward(0) # updates the turtle visibility on screen\n            self._shown = p[\"shown\"]\n\n\n# No RawTurtle/RawPen for this version, unlike CPython's; only Turtle/Pen\nclass Turtle(TPen, TNavigator):\n    \"\"\"Animation part of the Turtle.\n    Puts Turtle upon a TurtleScreen and provides tools for\n    its animation.\n    \"\"\"\n    _pen = None\n    screen = None\n\n    def __init__(self, shape=_CFG[\"shape\"], visible=_CFG[\"visible\"]):\n\n        self.screen = Screen()\n        TPen.__init__(self)\n        TNavigator.__init__(self, self.screen.mode())\n        self._poly = None\n        self._creatingPoly = False\n        self._fillitem = self._fillpath = None\n\n        self.name = shape\n        self.svg, rotation = self.screen.create_svg_turtle(self, name=shape)\n        self.svg.setAttribute(\"opacity\", 0)\n        self._shown = False\n        if visible:\n            self.showturtle() # will ensure that turtle become visible at appropriate time\n        self.screen._turtles.append(self)\n        self.rotation_correction = rotation\n        # apply correction to image orientation\n        self._old_heading = self.heading() + self.rotation_correction\n        speed = self.speed()\n        self.speed(0)\n        self.left(-self._angleOffset) # this will update the display to include the correction\n        self.speed(speed)\n\n    def reset(self):\n        \"\"\"Delete the turtle's drawings and restore its default values.\n        \"\"\"\n        ## TODO: review this and most likely revise docstring.\n        TNavigator.reset(self)\n        TPen._reset(self)\n        self._old_heading = self.heading() + self.rotation_correction\n        self.home()\n        self.color(_CFG[\"pencolor\"], _CFG[\"fillcolor\"])\n\n    def clear(self):\n        sys.stderr.write(\"Warning: Turtle.clear() is not implemented.\\n\")\n\n    def shape(self, name=None):\n        \"\"\"Set turtle shape to shape with given name\n        / return current shapename if no name is provided\n        \"\"\"\n        if name is None:\n            return self.name\n        _turtle = self._make_copy(name=name)\n\n        visible = self.isvisible()\n        if visible:\n            self.hideturtle()\n        self.screen.turtle_canvas <= self.svg\n        self.svg = _turtle\n        self.screen._turtles.append(self)\n        if visible:\n            self.showturtle()\n\n    def clearstamp(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.clearstamp() is not implemented.\\n\")\n\n    def clearstamps(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.clearstamps() is not implemented.\\n\")\n\n    def onclick(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.onclick() is not implemented.\\n\")\n\n    def ondrag(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.ondrag() is not implemented.\\n\")\n\n    def onrelease(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.onrelease() is not implemented.\\n\")\n\n    def undo(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.undo() is not implemented.\\n\")\n\n    def setundobuffer(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.setundobuffer() is not implemented.\\n\")\n\n    def undobufferentries(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.undobufferentries() is not implemented.\\n\")\n\n    def shapesize(self, *args, **kwargs):\n        sys.stderr.write(\"Warning: Turtle.shapesize() is not implemented.\\n\")\n    turtlesize = shapesize\n\n    def shearfactor(self, shear=None):\n        sys.stderr.write(\"Warning: Turtle.shearfactor() is not implemented.\\n\")\n\n    def settiltangle(self, angle):\n        sys.stderr.write(\"Warning: Turtle.settiltangle() is not implemented.\\n\")\n\n    def tiltangle(self, angle=None):\n        sys.stderr.write(\"Warning: Turtle.tiltangle() is not implemented.\\n\")\n\n    def tilt(self, angle):\n        sys.stderr.write(\"Warning: Turtle.tilt() is not implemented.\\n\")\n\n    def shapetransform(self, t11=None, t12=None, t21=None, t22=None):\n        sys.stderr.write(\"Warning: Turtle.shapetransform() is not implemented.\\n\")\n\n    def get_shapepoly(self):\n        sys.stderr.write(\"Warning: Turtle.get_shapepoly() is not implemented.\\n\")\n\n    def _goto(self, x, y):\n        \"\"\"Move the pen to the point end, thereby drawing a line\n        if pen is down. All other methods for turtle movement depend\n        on this one.\n        \"\"\"\n\n        begin, duration, _from, _to = self.screen._drawline(self,\n                                  ((self._x, self._y), (x, y)),\n                                  (self._pencolor, self._fillcolor),\n                                  self._pensize, self._speed)\n        # if self._shown:\n        #     self.svg <= svg.animateMotion(begin=begin, dur=_CFG[\"min_duration\"],\n        #                                   fill=\"remove\")\n\n        #     self.svg <= svg.animateMotion(From=\"%s,%s\" % _from, to=\"%s,%s\" % _to,\n        #                                   dur=duration, begin=begin, fill=\"freeze\")\n\n\n        if self._fillpath is not None:\n            self._fillpath.append((x, y))\n        self._position = (x, y)\n        self._x = x\n        self._y = y\n\n\n    def _rotate(self, angle):\n        \"\"\"Turns pen clockwise by angle.\n        \"\"\"\n        angle*=self._degreesPerAU\n        self._angle += -self.screen.y_points_down * angle\n        self._rotate_image(angle)\n\n    def _rotate_image(self, angle):\n        new_heading = self._old_heading - angle\n\n        if self.isvisible():\n            previous_end, new_frame_id = self.screen._new_frame()\n            if self._speed == 0:\n                duration = _CFG[\"min_duration\"]\n            else:\n                duration = (abs(angle) / (self._speed * 360))\n                if duration < 0.001:\n                    duration = _CFG[\"min_duration\"]\n                else:\n                    duration = \"%6.3fs\" % duration\n\n            # self.svg <= svg.animateMotion(begin=previous_end,\n            #                               dur=_CFG[\"min_duration\"], fill=\"remove\")\n            # self.svg <= svg.animateTransform(attributeName=\"transform\",\n            #                                  Id = new_frame_id,\n            #                                  type=\"rotate\",\n            #                                  From=(self._old_heading, 0, 0),\n            #                                  to=(new_heading, 0, 0),\n            #                                  begin=previous_end,\n            #                         dur=duration, fill=\"freeze\")\n        self._old_heading = new_heading\n\n    def filling(self):\n        \"\"\"Return fillstate (True if filling, False else).\n        \"\"\"\n        return self._fillpath is not None\n\n    def begin_fill(self):\n        \"\"\"Called just before drawing a shape to be filled.\n        \"\"\"\n        self._fillpath = [(self._x, self._y)]\n\n    def end_fill(self):\n        \"\"\"Fill the shape drawn after the call begin_fill().\n        \"\"\"\n        if self.filling() and len(self._fillpath) > 2:\n            self.screen._drawpoly(self._fillpath, outline=self._pencolor,\n                                  fill=self._fillcolor, )\n        else:\n            print(\"No path to fill.\")\n        self._fillpath = None\n\n    def dot(self, size=None, color=None):\n        \"\"\"Draw a filled circle with diameter size, using color.\n        \"\"\"\n        item = self.screen._dot((self._x, self._y), size, color=color)\n\n    def _write(self, txt, align, font, color=None):\n        \"\"\"Performs the writing for write()\n        \"\"\"\n        if color is None:\n            color = self._pencolor\n        self.screen._write((self._x, self._y), txt, align, font, color)\n\n\n    def write(self, arg, align=\"left\", font=(\"Arial\", 8, \"normal\"), color=None):\n        \"\"\"Write text at the current turtle position.\n\n        Arguments:\n        arg -- info, which is to be written to the TurtleScreen; it will be\n           converted to a string.\n        align (optional) -- one of the strings \"left\", \"center\" or right\"\n        font (optional) -- a triple (fontname, fontsize, fonttype)\n        \"\"\"\n        self._write(str(arg), align.lower(), font, color=color)\n\n    def begin_poly(self):\n        \"\"\"Start recording the vertices of a polygon.\n        \"\"\"\n        self._poly = [(self._x, self._y)]\n        self._creatingPoly = True\n\n    def end_poly(self):\n        \"\"\"Stop recording the vertices of a polygon.\n        \"\"\"\n        self._creatingPoly = False\n\n    def get_poly(self):\n        \"\"\"Return the lastly recorded polygon.\n        \"\"\"\n        # check if there is any poly?\n        if self._poly is not None:\n            return tuple(self._poly)\n\n    def getscreen(self):\n        \"\"\"Return the TurtleScreen object, the turtle is drawing on.\n        \"\"\"\n        return self.screen\n\n    def getturtle(self):\n        \"\"\"Return the Turtle object itself.\n\n           Only reasonable use: as a function to return the 'anonymous turtle'\n        \"\"\"\n        return self\n    getpen = getturtle\n\n    def _make_copy(self, name=None):\n        '''makes a copy of the current svg turtle, but possibly using a\n           different shape. This copy is then ready to be inserted\n           into a canvas.'''\n\n        if name is None:\n            name = self.name\n\n        # We recreate a copy of the existing turtle, possibly using a different\n        # name/shape; we set the opacity to\n        # 0 since there is no specific time associated with the creation of\n        # such an object: we do not want to show it early.\n        _turtle, rotation = self.screen.create_svg_turtle(self, name=name)\n        _turtle.setAttribute(\"opacity\", 0)\n        _turtle.setAttribute(\"fill\", self._fillcolor)\n        _turtle.setAttribute(\"stroke\", self._pencolor)\n\n        # We use timed animations to get it with the proper location, orientation\n        # and appear at the desired time.\n        previous_end, new_frame_id = self.screen._new_frame()\n        x, y = self.screen._convert_coordinates(self._x, self._y)\n        # _turtle <= svg.animateMotion(begin=previous_end, dur=_CFG[\"min_duration\"],\n        #                                   fill=\"remove\")\n\n        # _turtle <= svg.animateMotion(Id=new_frame_id,\n        #                              From=\"%s,%s\" % (x, y), to=\"%s,%s\" % (x, y),\n        #                              dur=_CFG[\"min_duration\"], begin=previous_end,\n        #                              fill=\"freeze\")\n        # _turtle <= svg.animateTransform(attributeName=\"transform\",\n        #                                 type=\"rotate\",\n        #                                 From=(self._old_heading, 0, 0),\n        #                                 to=(self._old_heading, 0, 0),\n        #                                 begin=previous_end,\n        #                                 dur=_CFG[\"min_duration\"], fill=\"freeze\")\n        # _turtle <= svg.animate(begin=previous_end,\n        #                    dur=_CFG[\"min_duration\"], fill=\"freeze\",\n        #                    attributeName=\"opacity\", attributeType=\"XML\",\n        #                    From=0, to=1)\n        return _turtle\n\n    def stamp(self):\n        '''draws a permanent copy of the turtle at its current location'''\n\n        _turtle = self._make_copy(name=self.name)\n        self.screen.canvas <= _turtle\n\n\n    def clone(self):\n        \"\"\"Create and return a clone of the turtle.\n        \"\"\"\n        n = Turtle(self.name)\n\n        attrs = vars(self)\n        new_dict = {}\n        for attr in attrs:\n            if isinstance(getattr(self, attr), (int, str, float)):\n                new_dict[attr] = getattr(self, attr)\n        n.__dict__.update(**new_dict)\n        # ensure that visible characteristics are consistent with settings\n        if not n._shown:\n            n._shown = True  # otherwise, hideturtle() would have not effect\n            n.hideturtle()\n        n.left(0)\n        n.fd(0)\n        n.color(n.color())\n        return n\n\n\nPen = Turtle\n\n\ndef done():\n    Screen().show_scene()\nshow_scene = done\n\n\ndef replay_scene():\n    \"Start playing an animation by 'refreshing' the canvas.\"\n    if (_CFG[\"turtle_canvas_id\"] in document and\n            document[_CFG[\"turtle_canvas_id\"]] is not None):\n        element = document[_CFG[\"turtle_canvas_id\"]]\n        element.parentNode.removeChild(element)\n    show_scene()\n\n\ndef restart():\n    \"For Brython turtle: clears the existing drawing and canvas\"\n    _CFG.update(_cfg_copy)\n    Screen().reset()\n    Turtle._pen = None\n\n    if (_CFG[\"turtle_canvas_id\"] in document and\n            document[_CFG[\"turtle_canvas_id\"]] is not None):\n        element = document[_CFG[\"turtle_canvas_id\"]]\n        element.parentNode.removeChild(element)\n\n### Creating functions based\n\n_tg_screen_functions = ['addshape', 'bgcolor', 'bgpic', 'bye',\n        'clearscreen', 'colormode', 'delay', 'exitonclick', 'getcanvas',\n        'getshapes', 'listen', 'mainloop', 'mode', 'numinput',\n        'onkey', 'onkeypress', 'onkeyrelease', 'onscreenclick', 'ontimer',\n        'register_shape', 'resetscreen', 'screensize', 'setup',\n        'setworldcoordinates', 'textinput', 'title', 'tracer', 'turtles', 'update',\n        'window_height', 'window_width']\n\n_tg_turtle_functions = ['back', 'backward', 'begin_fill', 'begin_poly', 'bk',\n        'circle', 'clear', 'clearstamp', 'clearstamps', 'clone', 'color',\n        'degrees', 'distance', 'dot', 'down', 'end_fill', 'end_poly', 'fd',\n        'fillcolor', 'filling', 'forward', 'get_poly', 'getpen', 'getscreen', 'get_shapepoly',\n        'getturtle', 'goto', 'heading', 'hideturtle', 'home', 'ht', 'isdown',\n        'isvisible', 'left', 'lt', 'onclick', 'ondrag', 'onrelease', 'pd',\n        'pen', 'pencolor', 'pendown', 'pensize', 'penup', 'pos', 'position',\n        'pu', 'radians', 'right', 'reset', 'resizemode', 'rt',\n        'seth', 'setheading', 'setpos', 'setposition', 'settiltangle',\n        'setundobuffer', 'setx', 'sety', 'shape', 'shapesize', 'shapetransform', 'shearfactor', 'showturtle',\n        'speed', 'st', 'stamp', 'tilt', 'tiltangle', 'towards',\n        'turtlesize', 'undo', 'undobufferentries', 'up', 'width',\n        'write', 'xcor', 'ycor']\n\n\n__all__ = (_tg_screen_functions + _tg_turtle_functions +\n           ['done', 'restart', 'replay_scene', 'Turtle', 'Screen'])\n\n## The following mechanism makes all methods of RawTurtle and Turtle available\n## as functions. So we can enhance, change, add, delete methods to these\n## classes and do not need to change anything here.\n\n__func_body = \"\"\"\\\ndef {name}(*args, **kw):\n    if {obj} is None:\n        {obj} = {init}\n    return {obj}.{name}(*args, **kw)\n\"\"\"\n\ndef _make_global_funcs(functions, cls, obj, init):\n    for methodname in functions:\n        try:\n            method = getattr(cls, methodname)\n        except AttributeError:\n            print(\"methodname missing:\", methodname)\n            continue\n        defstr = __func_body.format(obj=obj, init=init, name=methodname)\n        exec(defstr, globals())\n\n_make_global_funcs(_tg_turtle_functions, Turtle, 'Turtle._pen', 'Turtle()')\n\n_make_global_funcs(_tg_screen_functions, Screen, 'Turtle.screen', 'Screen()')", ["math.sin", "math.cos", "_svg", "browser.html", "browser.timer", "sys", "browser", "math", "browser.document", "browser.console"]], "setgame.cardcanvas": [".py", "import brython_turtle as turtle\nfrom .setkaart import SetKaart\nfrom browser import document, html\n\n\nclass CardCanvas():\n    \"\"\"\n    HTML Canvas for rendering set cards using python turtle.\n    \"\"\"\n\n    def __init__(self, parent, number, name, setcard, element_id=None):\n        self.sizex = 180\n        self.sizey = 240\n        self.bgcolor = \"white\"\n        self.selectedColor = \"blue\"\n        self.isSelected = False\n        self.selectedTag = \"selectedItem\"\n        self.selectedId = None\n        self.name = name\n        self.number = number\n        self.setcard = setcard\n        if (element_id):\n            self.element_id = element_id\n        else:\n            self.element_id = \"canvas\"+str(self.number)\n        self.initTurtleCanvas()\n        self.renderCard()\n        turtle.done()\n        document[self.element_id].bind('click', self.toggleSelect)\n\n\n    def initTurtleCanvas(self):\n        turtle.set_defaults(\n            canvwidth=self.sizex,\n            canvheight=self.sizey,\n            pencolor=\"black\",\n            fillcolor=\"pink\",\n            turtle_canvas_wrapper=document[self.element_id]\n        )\n        self.myTurtle = turtle.Turtle()\n        self.myTurtle.shape(\"turtle\")\n        # self.myTurtle.speed(1)\n        # self.myTurtle.pensize(500)\n        # self.myTurtle.showturtle()\n\n\n    def toggleSelect(self, event):\n        if self.isSelected == True:\n            self.isSelected = False\n            document[self.element_id].attrs['class'] = 'cardcanvas'\n        else:\n            self.isSelected = True\n            document[self.element_id].attrs['class'] = 'cardcanvas selected'\n\n\n    def tekenOvaal(self, tina, randkleur, vulkleur):\n        tina.speed(0)\n        tina.pensize(3)\n        tina.pencolor(randkleur)\n        tina.fillcolor(vulkleur)\n        tina.begin_fill()\n        tina.forward(30)\n        tina.circle(25, 180)\n        tina.forward(60)\n        tina.circle(25, 180)\n        tina.forward(30)\n        tina.end_fill()\n\n\n    def tekenRuit(self, tina, randkleur, vulkleur):\n        tina.speed(0)\n        tina.pensize(3)\n        tina.pencolor(randkleur)\n        tina.fillcolor(vulkleur)\n        tina.penup()\n        tina.left(90)\n        tina.forward(15)\n        tina.right(90)\n        tina.forward(60)\n        tina.pendown()\n        tina.begin_fill()\n        tina.left(150)\n        tina.forward(60)\n        tina.left(60)\n        tina.forward(60)\n        tina.left(120)\n        tina.forward(60)\n        tina.left(60)\n        tina.forward(60)\n        tina.right(30)\n        tina.end_fill()\n\n\n    def tekenGolf(self, tina, randkleur, vulkleur):\n        tina.speed(0)\n        tina.pensize(3)\n        tina.pencolor(randkleur)\n        tina.fillcolor(vulkleur)\n        tina.begin_fill()\n        tina.forward(15)\n        tina.circle(35, 90)\n        tina.circle(20, 60)\n        tina.circle(10, 60)\n        tina.circle(-30, 30)\n        tina.forward(30)\n        tina.circle(35, 90)\n        tina.circle(20, 60)\n        tina.circle(10, 60)\n        tina.circle(-30, 30)\n        tina.forward(30)\n        tina.end_fill()\n\n\n    def renderCard(self):\n        \"\"\"\n        Laat tina de correcte tekening maken op de kaart. Maakt gebruik van\n        de hulpfuncties tekenOvaal(), tekenRuit(), tekenGolf()\n        \"\"\"\n        randkleuren = ['red', 'purple', 'green']\n        vulkleuren = [['red',    'pink',          'white'],\n                      ['purple', 'MediumPurple', 'white'],\n                      ['green',  'LightGreen',   'white']]\n        xy = []\n        tina = self.myTurtle\n        if self.setcard == None:\n            self.drawLabel()\n        else:\n            if self.setcard.hoeveelheid == 3:\n                xy = [[0, -105],\n                      [0, -30],\n                      [0,  45]]\n            elif self.setcard.hoeveelheid == 2:\n                xy = [[0, -60],\n                      [0, 30]]\n            elif self.setcard.hoeveelheid == 1:\n                xy = [[0, -30]]\n\n            for pos in xy:\n                tina.penup()\n                tina.goto(pos[0], pos[1])\n                tina.pendown()\n\n                if self.setcard.vorm == 1:  # ovaal\n                    self.tekenOvaal(tina,\n                                    randkleuren[self.setcard.kleur-1],\n                                    vulkleuren[self.setcard.kleur-1][self.setcard.vulling-1])\n                elif self.setcard.vorm == 2:  # ruit\n                    self.tekenRuit(tina,\n                                   randkleuren[self.setcard.kleur-1],\n                                   vulkleuren[self.setcard.kleur-1][self.setcard.vulling-1])\n                elif self.setcard.vorm == 3:  # golf\n                    self.tekenGolf(tina,\n                                   randkleuren[self.setcard.kleur-1],\n                                   vulkleuren[self.setcard.kleur-1][self.setcard.vulling-1])\n", ["brython_turtle", "browser.html", "browser", "setgame.setkaart.SetKaart", "browser.document", "setgame.setkaart", "setgame"]], "setgame.deck": [".py", "import random\nfrom .setkaart import SetKaart\n\n\nclass Deck():\n    \"\"\"\n    Een Deck bestaat uit 81 unique SetKaart-objecten. Als een kaart getrokken\n    wordt, wordt deze overgebracht naar het speelveld.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Normal method does a populate and shuffle.\n        \"\"\"\n        self.deck = []\n\n\n    def populateDeck(self):\n        \"\"\"\n        Maakt een nieuw Deck object aan waarin alle mogelijke kaarten voorkomen\n        door een loop te maken over de hoeveelheid, kleur, vorm en vulling.\n        \"\"\"\n\n        for hoeveelheid in [1, 2, 3]:\n            for kleur in [1, 2, 3]:\n                for vorm in [1, 2, 3]:\n                    for vulling in [1, 2, 3]:\n                        self.addCard( SetKaart(hoeveelheid, kleur, vorm, vulling) )\n\n\n    def shuffleDeck(self):\n        random.shuffle(self.deck)\n\n\n    def addCard(self, card):\n        self.deck.append(card)\n\n\n    def drawCard(self):\n        return self.deck.pop()\n\n\n    def printDeck(self):\n        \"\"\"\n        Prints the remaining cards of the Deck in order (using int print)\n        \"\"\"\n        cardnum = 1\n        for card in self.deck:\n            print (card)\n            cardnum = cardnum + 1\n\n\n    def __getitem__(self, key):\n        return self.deck[key]\n", ["setgame.setkaart", "setgame.setkaart.SetKaart", "setgame", "random"]], "_svg": [".js", "// creation of an HTML element\nvar $module = (function($B){\n\nvar _b_ = $B.builtins\nvar TagSum = $B.TagSum // defined in py_dom.js\n\nvar $s=[]\nfor(var $b in _b_) $s.push('var ' + $b +' = _b_[\"' + $b + '\"]')\neval($s.join(';'))\n\nvar $svgNS = \"http://www.w3.org/2000/svg\"\nvar $xlinkNS = \"http://www.w3.org/1999/xlink\"\n\nfunction makeTagDict(tagName){\n    // return the dictionary for the class associated with tagName\n    var dict = $B.make_class(tagName)\n\n    dict.__init__ = function(){\n        var $ns = $B.args('__init__', 1, {self: null}, ['self'],\n            arguments, {}, 'args', 'kw'),\n            self = $ns['self'],\n            args = $ns['args']\n        if(args.length == 1){\n            var first = args[0]\n            if(isinstance(first, [str, int, float])){\n                self.appendChild(document.createTextNode(str.$factory(first)))\n            }else if(first.__class__ === TagSum){\n                for(var i = 0, len = first.children.length; i < len; i++){\n                    self.appendChild(first.children[i].elt)\n                }\n            }else{ // argument is another DOMNode instance\n                try{self.appendChild(first.elt)}\n                catch(err){throw ValueError.$factory('wrong element ' + first)}\n            }\n        }\n\n        // attributes\n        var items = _b_.list.$factory(_b_.dict.items($ns['kw']))\n        for(var i = 0, len = items.length; i < len; i++){\n            // keyword arguments\n            var arg = items[i][0],\n                value = items[i][1]\n            if(arg.toLowerCase().substr(0,2) == \"on\"){\n                // Event binding passed as argument \"onclick\", \"onfocus\"...\n                // Better use method bind of DOMNode objects\n                var js = '$B.DOMNode.bind(self,\"' +\n                    arg.toLowerCase().substr(2)\n                eval(js+'\",function(){'+value+'})')\n            }else if(arg.toLowerCase() == \"style\"){\n                $B.DOMNode.set_style(self,value)\n            }else if(arg.toLowerCase().indexOf(\"href\") !== -1){ // xlink:href\n                self.setAttributeNS( \"http://www.w3.org/1999/xlink\",\n                    \"href\",value)\n            }else{\n                if(value !== false){\n                    // option.selected=false sets it to true :-)\n                    try{\n                        arg = arg.replace('_', '-')\n                        self.setAttributeNS(null, arg, value)\n                    }catch(err){\n                        throw ValueError.$factory(\"can't set attribute \" + arg)\n                    }\n                }\n            }\n        }\n    }\n\n    dict.__mro__ = [$B.DOMNode, $B.builtins.object]\n\n    dict.__new__ = function(cls){\n        var res = $B.DOMNode.$factory(document.createElementNS($svgNS, tagName))\n        res.__class__ = cls\n        return res\n    }\n\n    dict.$factory = function(){\n        var res = $B.DOMNode.$factory(\n            document.createElementNS($svgNS, tagName))\n        res.__class__ = dict\n        // apply __init__\n        dict.__init__(res, ...arguments)\n        return res\n    }\n\n    $B.set_func_names(dict, \"browser.svg\")\n\n    return dict\n}\n\n\n// SVG\nvar $svg_tags = ['a',\n'altGlyph',\n'altGlyphDef',\n'altGlyphItem',\n'animate',\n'animateColor',\n'animateMotion',\n'animateTransform',\n'circle',\n'clipPath',\n'color_profile', // instead of color-profile\n'cursor',\n'defs',\n'desc',\n'ellipse',\n'feBlend',\n'foreignObject', //patch to enable foreign objects\n'g',\n'image',\n'line',\n'linearGradient',\n'marker',\n'mask',\n'path',\n'pattern',\n'polygon',\n'polyline',\n'radialGradient',\n'rect',\n'set',\n'stop',\n'svg',\n'text',\n'tref',\n'tspan',\n'use']\n\n// create classes\nvar obj = new Object()\nvar dicts = {}\nfor(var i = 0, len = $svg_tags.length; i < len; i++){\n    var tag = $svg_tags[i]\n    obj[tag] = makeTagDict(tag)\n}\n\nreturn obj\n})(__BRYTHON__)\n"], "browser.html": [".py", "from _html import *\n", ["_html"]], "browser": [".py", "", [], 1], "setgame.game": [".py", "\"\"\"\ngame.py\n============================================\nBasismodule voor de logica van het spel Set.\n\"\"\"\n\nfrom .setkaart import SetKaart\nfrom .deck import Deck\n\n\nclass Game():\n    \"\"\"\n    Game class implementeert de logica van het kaartspel.\n    \"\"\"\n\n    def __init__(self, deck=None, field=None):\n        self.score = 0\n        self.deck = deck\n        self.field = field\n\n\n    def telSets(self, field):\n        \"\"\"\n        Telt het aantal sets op het veld door simpelweg alle combinaties\n        te proberen en vervolgens te delen door het aantal keer dat een\n        set is meegenomen.\n        \"\"\"\n        count = 0\n        if field.length() >= 3:\n            for c1 in field:\n                field2 = field[:]\n                field2.remove(c1)\n                for c2 in field2:\n                    field3 = field2[:]\n                    field3.remove(c2)\n                    for c3 in field3:\n                        if self.isSet(c1, c2, c3):\n                            count += 1\n        return int(count / 6)\n\n\n    def deelSet(self, a, b, c):\n        if a == b and b == c:\n            return True\n        elif a + b + c == 6:\n            return True\n        else:\n            return False\n\n\n    def isSet(self, kaart1, kaart2, kaart3):\n        \"\"\"\n        Returnt de waarde True als kaart1, kaart2 en kaart3 een set vormen en anders returnt het de waarde False.\n        Om mee te beginnen zal het elke 3 kaarten als niet een set aanduiden (met return False).\n\n        :param kaart1: De eerste SetKaart om te vergelijken.\n        :type kaart1: SetKaart\n        :param kaart2: De tweede SetKaart om te vergelijken.\n        :type kaart2: SetKaart\n        :param kaart3: De derde SetKaart om te vergelijken.\n        :type kaart3: SetKaart\n        \"\"\"\n        if self.deelSet( kaart1.hoeveelheid, kaart2.hoeveelheid, kaart3.hoeveelheid ):\n            if self.deelSet( kaart1['kleur'], kaart2['kleur'], kaart3['kleur'] ):\n                if self.deelSet( kaart1['vorm'], kaart2['vorm'], kaart3['vorm'] ):\n                    if self.deelSet( kaart1['vulling'], kaart2['vulling'], kaart3['vulling'] ):\n                        return True\n        else:\n            return False\n\n\n    def maakSet(self, kaart1, kaart2):\n        \"\"\"\n        Returnt de vereiste kaart om een set te maken. De eigenschappen van de kaarten kun je opvragen met:\n        ``kaart1.hoeveelheid``, ``kaart1.kleur``, ``kaart1.vorm``, ``kaart1.vulling`` en ``kaart2.hoeveelheid``, ``kaart2.kleur``, ``kaart2.vorm``, ``kaart2.vulling``.\n\n        Als bijvoorbeeld ``maakSet( SetKaart(1,1,1,1), SetKaart(2,2,2,2) )`` aangeroepen wordt dan geldt:\n            kaart1.hoeveelheid = 1\n            kaart1.kleur = 1\n            kaart1.vorm = 1\n            kaart1.vulling = 1\n            en\n            kaart2.hoeveelheid = 2\n            kaart2.kleur = 2\n            kaart2.vorm = 2\n            kaart2.vulling = 2\n        \"\"\"\n\n        # using inline conditionals for legibility\n        hv = kaart1['hoeveelheid'] if kaart1['hoeveelheid'] == kaart2['hoeveelheid']  else (6-kaart1['hoeveelheid'] )-kaart2['hoeveelheid']\n        kl = kaart1['kleur']       if kaart1['kleur']       == kaart2['kleur']        else (6-kaart1['kleur']       )-kaart2['kleur']\n        vo = kaart1['vorm']        if kaart1['vorm']        == kaart2['vorm']         else (6-kaart1['vorm']        )-kaart2['vorm']\n        vu = kaart1['vulling']     if kaart1['vulling']     == kaart2['vulling']      else (6-kaart1['vulling']     )-kaart2['vulling']\n\n        return SetKaart(hv, kl, vo, vu)\n", ["setgame.deck", "setgame.deck.Deck", "setgame.setkaart.SetKaart", "setgame.setkaart", "setgame"]], "setgame.field": [".py", "class Field():\n    \"\"\"\n    Keeps track of the playing field cards.\n    \"\"\"\n\n\n    def __init__(self, num):\n        self.field = []\n\n\n    def addCard(self, card):\n        self.field.append(card)\n\n\n    def removeCard(self, num):\n        self.field[num] = None\n\n\n    def __getitem__(self,num):\n        return self.field[num]\n\n\n    def length(self):\n        \"\"\"\n        Number of cards on the field. This equals the size of the field minus the number of holes.\n        \"\"\"\n        return len(self.field) - self.field.count(None)\n\n\n    def __len__(self):\n        \"\"\"\n        Length of field; note that this includes holes. If you wish to omit holes use .length()\n        \"\"\"\n        return len(self.field)\n", []], "sys": [".py", "\nfrom _sys import *\nimport javascript\n\n_getframe=Getframe\n\nabiflags=0\n\ndef audit(event,*args):\n ''\n pass\n \nbrython_debug_mode=__BRYTHON__.debug\n\nbase_exec_prefix=__BRYTHON__.brython_path\n\nbase_prefix=__BRYTHON__.brython_path\n\nbuiltin_module_names=__BRYTHON__.builtin_module_names\n\nbyteorder='little'\n\ndont_write_bytecode=True\n\nexec_prefix=__BRYTHON__.brython_path\n\nexecutable=__BRYTHON__.brython_path+'/brython.js'\n\nargv=[__BRYTHON__.script_path]\n\n\ndef displayhook(value):\n if value is not None :\n  stdout.write(repr(value))\n  \ndef exit(i=None ):\n raise SystemExit('')\n \nclass flag_class:\n\n def __init__(self):\n  self.debug=0\n  self.inspect=0\n  self.interactive=0\n  self.optimize=0\n  self.dont_write_bytecode=0\n  self.no_user_site=0\n  self.no_site=0\n  self.ignore_environment=0\n  self.verbose=0\n  self.bytes_warning=0\n  self.quiet=0\n  self.hash_randomization=1\n  \nflags=flag_class()\n\nclass float_info:\n mant_dig=53\n max=javascript.Number.MAX_VALUE\n min=javascript.Number.MIN_VALUE\n radix=2\n \ndef getfilesystemencoding(*args,**kw):\n ''\n\n \n return 'utf-8'\n \ndef getfilesystemencodeerrors():\n return \"utf-8\"\n \ndef getrecursionlimit():\n return 200\n \ndef intern(string):\n return string\n \nclass int_info:\n bits_per_digit=30\n sizeof_digit=4\n \nmaxsize=2 **63 -1\n\nmaxunicode=1114111\n\nplatform=\"brython\"\n\nprefix=__BRYTHON__.brython_path\n\nversion='.'.join(str(x)for x in __BRYTHON__.version_info[:3])\nversion +=\" (default, %s) \\n[Javascript 1.5] on Brython\"\\\n%__BRYTHON__.compiled_date\nhexversion=0x030800f0\n\nclass _version_info:\n\n def __init__(self,version_info):\n  self.version_info=version_info\n  self.major=version_info[0]\n  self.minor=version_info[1]\n  self.micro=version_info[2]\n  self.releaselevel=version_info[3]\n  self.serial=version_info[4]\n  \n def __getitem__(self,index):\n  if isinstance(self.version_info[index],list):\n   return tuple(self.version_info[index])\n  return self.version_info[index]\n  \n def hexversion(self):\n  try :\n   return '0%d0%d0%d'%(self.major,self.minor,self.micro)\n  finally :\n   return '0%d0000'%(self.major)\n   \n def __str__(self):\n  _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', \"\\\n  \"serial=%d)\"\n  return _s %(self.major,self.minor,self.micro,\n  self.releaselevel,self.serial)\n  \n def __eq__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)==other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ge__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __gt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __le__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __lt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ne__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)!=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n  \n  \nversion_info=_version_info(__BRYTHON__.version_info)\n\nclass _implementation:\n\n def __init__(self):\n  self.name='brython'\n  self.version=_version_info(__BRYTHON__.implementation)\n  self.hexversion=self.version.hexversion()\n  self.cache_tag=None\n  \n def __repr__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \n def __str__(self):\n  return \"namespace(name='%s' version=%s hexversion='%s')\"%(self.name,\n  self.version,self.hexversion)\n  \nimplementation=_implementation()\n\nclass _hash_info:\n\n def __init__(self):\n  self.width=32\n  self.modulus=2147483647\n  self.inf=314159\n  self.nan=0\n  self.imag=1000003\n  self.algorithm='siphash24'\n  self.hash_bits=64\n  self.seed_bits=128\n  cutoff=0\n  \n def __repr__(self):\n \n  return \"sys.hash_info(width=32, modulus=2147483647, inf=314159, \"\\\n  \"nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, \"\\\n  \"seed_bits=128, cutoff=0)\"\n  \nhash_info=_hash_info()\n\nclass _float_info:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n def __init__(self):\n  self.dig=15\n  self.epsilon=2 **-52\n  self.mant_dig=53\n  self.max=javascript.Number.MAX_VALUE\n  self.max_exp=2 **10\n  self.max_10_exp=308\n  self.min=2 **(-1022)\n  self.min_exp=-1021\n  self.min_10_exp=-307\n  self.radix=2\n  self.rounds=1\n  self._tuple=(self.max,self.max_exp,self.max_10_exp,self.min,\n  self.min_exp,self.min_10_exp,self.dig,self.mant_dig,self.epsilon,\n  self.radix,self.rounds)\n  \n def __getitem__(self,k):\n  return self._tuple[k]\n  \n def __iter__(self):\n  return iter(self._tuple)\n  \nfloat_info=_float_info()\n\nwarnoptions=[]\n\ndef getfilesystemencoding():\n return 'utf-8'\n \n \n__stdout__=__BRYTHON__.stdout\n__stderr__=__BRYTHON__.stderr\n__stdin__=__BRYTHON__.stdin\n\n__excepthook__=excepthook\n", ["_sys", "javascript"]], "random": [".js", "// Javascript implementation of the random module\n// Based on Ian Bicking's implementation of the Mersenne twister\n\nvar $module = (function($B){\n\nvar _b_ = $B.builtins,\n    i\n\nvar VERSION = 3\n\n// Code copied from https://github.com/ianb/whrandom/blob/master/mersenne.js\n// by Ian Bicking\n\n// this program is a JavaScript version of Mersenne Twister,\n// a straight conversion from the original program, mt19937ar.c,\n// translated by y. okada on july 17, 2006.\n// and modified a little at july 20, 2006, but there are not any substantial differences.\n// modularized by Ian Bicking, March 25, 2013 (found original version at http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVASCRIPT/java-script.html)\n// in this program, procedure descriptions and comments of original source code were not removed.\n// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.\n// lines commented with /* and */ are original comments.\n// lines commented with // are additional comments in this JavaScript version.\n/*\n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n\n   Before using, initialize the state by using init_genrand(seed)\n   or init_by_array(init_key, key_length).\n\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     3. The names of its contributors may not be used to endorse or promote\n        products derived from this software without specific prior written\n        permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nfunction RandomStream(seed) {\n    /*jshint bitwise:false */\n    /* Period parameters */\n    //c//#define N 624\n    //c//#define M 397\n    //c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */\n    //c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */\n    //c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */\n    var N = 624\n    var M = 397\n    var MATRIX_A = 0x9908b0df   /* constant vector a */\n    var UPPER_MASK = 0x80000000 /* most significant w-r bits */\n    var LOWER_MASK = 0x7fffffff /* least significant r bits */\n    //c//static unsigned long mt[N]; /* the array for the state vector  */\n    //c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */\n    var mt = new Array(N)   /* the array for the state vector  */\n    var mti = N + 1           /* mti==N+1 means mt[N] is not initialized */\n\n    function unsigned32(n1){\n        // returns a 32-bits unsiged integer from an operand to which applied a\n        // bit operator.\n        return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1\n    }\n\n    function subtraction32(n1, n2){\n    // emulates lowerflow of a c 32-bits unsiged integer variable, instead of\n    // the operator -. these both arguments must be non-negative integers\n    // expressible using unsigned 32 bits.\n        return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) :\n          n1 - n2\n    }\n\n    function addition32(n1, n2){\n        // emulates overflow of a c 32-bits unsiged integer variable, instead of\n        // the operator +. these both arguments must be non-negative integers\n        // expressible using unsigned 32 bits.\n        return unsigned32((n1 + n2) & 0xffffffff)\n    }\n\n    function multiplication32(n1, n2){\n        // emulates overflow of a c 32-bits unsiged integer variable, instead of the\n        // operator *. these both arguments must be non-negative integers\n        // expressible using unsigned 32 bits.\n        var sum = 0\n        for (var i = 0; i < 32; ++i){\n            if((n1 >>> i) & 0x1){\n                sum = addition32(sum, unsigned32(n2 << i))\n            }\n        }\n        return sum\n    }\n\n    /* initializes mt[N] with a seed */\n    //c//void init_genrand(unsigned long s)\n    function init_genrand(s) {\n        //c//mt[0]= s & 0xffffffff;\n        mt[0] = unsigned32(s & 0xffffffff)\n        for(mti = 1; mti < N; mti++){\n            mt[mti] =\n                //c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);\n                addition32(multiplication32(1812433253,\n                    unsigned32(mt[mti - 1] ^ (mt[mti - 1] >>> 30))), mti)\n            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n            /* In the previous versions, MSBs of the seed affect   */\n            /* only MSBs of the array mt[].                        */\n            /* 2002/01/09 modified by Makoto Matsumoto             */\n            //c//mt[mti] &= 0xffffffff;\n            mt[mti] = unsigned32(mt[mti] & 0xffffffff);\n            /* for >32 bit machines */\n        }\n    }\n\n    /* initialize by an array with array-length */\n    /* init_key is the array for initializing keys */\n    /* key_length is its length */\n    /* slight change for C++, 2004/2/26 */\n    //c//void init_by_array(unsigned long init_key[], int key_length)\n    function init_by_array(init_key, key_length) {\n        //c//int i, j, k;\n        var i, j, k\n        init_genrand(19650218)\n        i = 1\n        j = 0\n        k = (N > key_length ? N : key_length)\n        for(; k; k--){\n          //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))\n          //c// + init_key[j] + j; /* non linear */\n          mt[i] = addition32(\n              addition32(unsigned32(mt[i] ^\n                  multiplication32(unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),\n                  1664525)),\n              init_key[j]), j)\n          mt[i] =\n              //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */\n              unsigned32(mt[i] & 0xffffffff)\n          i++\n          j++\n          if(i >= N){mt[0] = mt[N - 1]; i = 1}\n          if(j >= key_length){j = 0}\n        }\n        for(k = N - 1; k; k--){\n            //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))\n            //c//- i; /* non linear */\n            mt[i] = subtraction32(\n                unsigned32(\n                    (mt[i]) ^\n                        multiplication32(\n                            unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),\n                    1566083941)),\n                i\n            )\n            //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */\n            mt[i] = unsigned32(mt[i] & 0xffffffff)\n            i++\n            if(i >= N){mt[0] = mt[N - 1]; i = 1}\n        }\n        mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n    }\n\n    /* generates a random number on [0,0xffffffff]-interval */\n    //c//unsigned long genrand_int32(void)\n    function genrand_int32() {\n        //c//unsigned long y;\n        //c//static unsigned long mag01[2]={0x0UL, MATRIX_A};\n        var y;\n        var mag01 = [0x0, MATRIX_A];\n        /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n        if(mti >= N){ /* generate N words at one time */\n            //c//int kk;\n            var kk\n\n            if(mti == N + 1){   /* if init_genrand() has not been called, */\n              init_genrand(Date.now()) /* a default initial seed is used */\n            }\n\n            for(kk = 0; kk < N - M; kk++){\n              //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);\n              //c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];\n              y = unsigned32((mt[kk]&UPPER_MASK) | (mt[kk + 1]&LOWER_MASK))\n              mt[kk] = unsigned32(mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1])\n            }\n            for(;kk < N - 1; kk++){\n              //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);\n              //c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];\n              y = unsigned32((mt[kk]&UPPER_MASK) | (mt[kk + 1]&LOWER_MASK))\n              mt[kk] = unsigned32(mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1])\n            }\n            //c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);\n            //c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];\n            y = unsigned32((mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK))\n            mt[N - 1] = unsigned32(mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1])\n            mti = 0\n        }\n\n        y = mt[mti++]\n\n        /* Tempering */\n        //c//y ^= (y >> 11);\n        //c//y ^= (y << 7) & 0x9d2c5680;\n        //c//y ^= (y << 15) & 0xefc60000;\n        //c//y ^= (y >> 18);\n        y = unsigned32(y ^ (y >>> 11))\n        y = unsigned32(y ^ ((y << 7) & 0x9d2c5680))\n        y = unsigned32(y ^ ((y << 15) & 0xefc60000))\n        y = unsigned32(y ^ (y >>> 18))\n\n        return y\n    }\n\n    /* generates a random number on [0,0x7fffffff]-interval */\n    //c//long genrand_int31(void)\n    function genrand_int31(){\n        //c//return (genrand_int32()>>1);\n        return (genrand_int32()>>>1)\n    }\n\n    /* generates a random number on [0,1]-real-interval */\n    //c//double genrand_real1(void)\n    function genrand_real1(){\n        return genrand_int32()*(1.0/4294967295.0)\n        /* divided by 2^32-1 */\n    }\n\n    /* generates a random number on [0,1)-real-interval */\n    //c//double genrand_real2(void)\n    function genrand_real2(){\n        return genrand_int32() * (1.0 / 4294967296.0)\n        /* divided by 2^32 */\n    }\n\n    /* generates a random number on (0,1)-real-interval */\n    //c//double genrand_real3(void)\n    function genrand_real3() {\n        return ((genrand_int32()) + 0.5) * (1.0 / 4294967296.0)\n        /* divided by 2^32 */\n    }\n\n    /* generates a random number on [0,1) with 53-bit resolution*/\n    //c//double genrand_res53(void)\n    function genrand_res53() {\n        //c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;\n        var a = genrand_int32() >>> 5,\n            b = genrand_int32() >>> 6\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0)\n    }\n    /* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n    var random = genrand_res53\n\n    random.seed = function(seed){\n        if(seed === undefined){seed = Date.now()}\n        if(typeof seed != \"number\"){seed = parseInt(seed, 10)}\n        if((seed !== 0 && ! seed) || isNaN(seed)){\n            throw _b_.ValueError.$factory(\"Bad seed: \" + _b_.str.$factory(seed))\n        }\n        init_genrand(seed)\n    }\n\n    random.seed(seed)\n\n    random.int31 = genrand_int31\n    random.real1 = genrand_real1\n    random.real2 = genrand_real2\n    random.real3 = genrand_real3\n    random.res53 = genrand_res53\n\n    // Added for compatibility with Python\n    random.getstate = function(){return [VERSION, mt, mti]}\n\n    random.setstate = function(state){\n        mt = state[1]\n        mti = state[2]\n    }\n\n    return random\n\n}\n\n// magic constants\n\nvar NV_MAGICCONST = 4 * Math.exp(-0.5)/Math.sqrt(2),\n    gauss_next = null,\n    NV_MAGICCONST = 1.71552776992141,\n    TWOPI = 6.28318530718,\n    LOG4 = 1.38629436111989,\n    SG_MAGICCONST = 2.50407739677627,\n    VERSION = VERSION\n\nvar Random = $B.make_class(\"Random\",\n    function(){\n        return {\n            __class__: Random,\n            _random: RandomStream(Date.now())\n        }\n    }\n)\n\nRandom._randbelow = function(self, x){\n    return Math.floor(x * self._random())\n}\n\nRandom._urandom = function(self, n){\n    /*\n    urandom(n) -> str\n    Return n random bytes suitable for cryptographic use.\n    */\n\n    var randbytes = []\n    for(i = 0; i < n; i++){randbytes.push(parseInt(self._random() * 256))}\n    return _b_.bytes.$factory(randbytes)\n}\n\nRandom.betavariate = function(){\n    /* Beta distribution.\n\n    Conditions on the parameters are alpha > 0 and beta > 0.\n    Returned values range between 0 and 1.\n\n\n    # This version due to Janne Sinkkonen, and matches all the std\n    # texts (e.g., Knuth Vol 2 Ed 3 pg 134 \"the beta distribution\").\n    */\n\n    var $ = $B.args('betavariate', 3, {self: null, alpha:null, beta:null},\n            ['self', 'alpha', 'beta'], arguments, {}, null, null),\n        self = $.self,\n        alpha = $.alpha,\n        beta = $.beta\n\n    var y = Random.gammavariate(self, alpha, 1)\n    if(y == 0){return _b_.float.$factory(0)}\n    else{return y / (y + Random.gammavariate(self, beta, 1))}\n}\n\nRandom.choice = function(){\n    var $ = $B.args(\"choice\", 2,\n        {self: null, seq:null},[\"self\", \"seq\"],arguments, {}, null, null),\n        self = $.self,\n        seq = $.seq\n    var len, rank\n    if(Array.isArray(seq)){len = seq.length}\n    else{len = _b_.getattr(seq,\"__len__\")()}\n    if(len == 0){\n        throw _b_.IndexError.$factory(\"Cannot choose from an empty sequence\")\n    }\n    rank = parseInt(self._random() * len)\n    if(Array.isArray(seq)){return seq[rank]}\n    else{return _b_.getattr(seq, \"__getitem__\")(rank)}\n}\n\nRandom.choices = function(){\n    var $ = $B.args(\"choices\", 3,\n            {self: null,population:null, weights:null, cum_weights:null, k:null},\n            [\"self\", \"population\", \"weights\", \"cum_weights\", \"k\"], arguments,\n            {weights: _b_.None, cum_weights: _b_.None, k: 1}, \"*\", null),\n            self = $.self,\n            population = $.population,\n            weights = $.weights,\n            cum_weights = $.cum_weights,\n            k = $.k\n\n    if(population.length == 0){\n        throw _b_.ValueError.$factory(\"population is empty\")\n    }\n    population = _b_.list.$factory(population) // issue #1268\n    if(weights === _b_.None){\n        weights = []\n        population.forEach(function(){\n            weights.push(1)\n        })\n    }else if(cum_weights !== _b_.None){\n        throw _b_.TypeError.$factory(\"Cannot specify both weights and \" +\n            \"cumulative weights\")\n    }else{\n        if(weights.length != population.length){\n            throw _b_.ValueError.$factory('The number of weights does not ' +\n                'match the population')\n        }\n    }\n    if(cum_weights === _b_.None){\n        var cum_weights = [weights[0]]\n        weights.forEach(function(weight, rank){\n            if(rank > 0){\n                cum_weights.push(cum_weights[rank - 1] + weight)\n            }\n        })\n    }else if(cum_weights.length != population.length){\n        throw _b_.ValueError.$factory('The number of weights does not ' +\n            'match the population')\n    }\n\n    var result = []\n    for(var i = 0; i < k; i++){\n        var rand = self._random() * cum_weights[cum_weights.length - 1]\n        for(var rank = 0, len = population.length; rank < len; rank++){\n            if(cum_weights[rank] > rand){\n                result.push(population[rank])\n                break\n            }\n        }\n    }\n    return result\n}\n\nRandom.expovariate = function(self, lambd){\n    /*\n    Exponential distribution.\n\n    lambd is 1.0 divided by the desired mean.  It should be\n    nonzero.  (The parameter would be called \"lambda\", but that is\n    a reserved word in Python.)  Returned values range from 0 to\n    positive infinity if lambd is positive, and from negative\n    infinity to 0 if lambd is negative.\n\n    */\n    // lambd: rate lambd = 1/mean\n    // ('lambda' is a Python reserved word)\n\n    // we use 1-random() instead of random() to preclude the\n    // possibility of taking the log of zero.\n    return -Math.log(1.0 - self._random()) / lambd\n}\n\nRandom.gammavariate = function(self, alpha, beta){\n    /* Gamma distribution.  Not the gamma function!\n\n    Conditions on the parameters are alpha > 0 and beta > 0.\n\n    The probability distribution function is:\n\n                x ** (alpha - 1) * math.exp(-x / beta)\n      pdf(x) =  --------------------------------------\n                  math.gamma(alpha) * beta ** alpha\n\n    */\n\n    // alpha > 0, beta > 0, mean is alpha*beta, variance is alpha*beta**2\n\n    // Warning: a few older sources define the gamma distribution in terms\n    // of alpha > -1.0\n\n    var $ = $B.args('gammavariate', 3,\n            {self: null, alpha:null, beta:null},\n            ['self', 'alpha', 'beta'],\n            arguments, {}, null, null),\n        self = $.self,\n        alpha = $.alpha,\n        beta = $.beta,\n        LOG4 = Math.log(4),\n        SG_MAGICCONST = 1.0 + Math.log(4.5)\n\n    if(alpha <= 0.0 || beta <= 0.0){\n        throw _b_.ValueError.$factory('gammavariate: alpha and beta must be > 0.0')\n    }\n\n    if(alpha > 1.0){\n\n        // Uses R.C.H. Cheng, \"The generation of Gamma\n        // variables with non-integral shape parameters\",\n        // Applied Statistics, (1977), 26, No. 1, p71-74\n\n        var ainv = Math.sqrt(2.0 * alpha - 1.0),\n            bbb = alpha - LOG4,\n            ccc = alpha + ainv\n\n        while(true){\n            var u1 = self._random()\n            if(!((1e-7 < u1) && (u1 < .9999999))){\n                continue\n            }\n            var u2 = 1.0 - self._random(),\n                v = Math.log(u1 / (1.0 - u1)) / ainv,\n                x = alpha * Math.exp(v),\n                z = u1 * u1 * u2,\n                r = bbb + ccc * v - x\n            if((r + SG_MAGICCONST - 4.5 * z >= 0.0) || r >= Math.log(z)){\n                return x * beta\n            }\n        }\n    }else if(alpha == 1.0){\n        // expovariate(1)\n        var u = self._random()\n        while(u <= 1e-7){u = self._random()}\n        return -Math.log(u) * beta\n    }else{\n        // alpha is between 0 and 1 (exclusive)\n\n        // Uses ALGORITHM GS of Statistical Computing - Kennedy & Gentle\n\n        while(true){\n            var u = self._random(),\n                b = (Math.E + alpha)/Math.E,\n                p = b*u,\n                x\n            if(p <= 1.0){x = Math.pow(p, (1.0/alpha))}\n            else{x = -Math.log((b-p)/alpha)}\n            var u1 = self._random()\n            if(p > 1.0){\n                if(u1 <= Math.pow(x, alpha - 1.0)){\n                    break\n                }\n            }else if(u1 <= Math.exp(-x)){\n                break\n            }\n        }\n        return x * beta\n    }\n}\n\nRandom.gauss = function(){\n\n    /* Gaussian distribution.\n\n    mu is the mean, and sigma is the standard deviation.  This is\n    slightly faster than the normalvariate() function.\n\n    Not thread-safe without a lock around calls.\n\n    # When x and y are two variables from [0, 1), uniformly\n    # distributed, then\n    #\n    #    cos(2*pi*x)*sqrt(-2*log(1-y))\n    #    sin(2*pi*x)*sqrt(-2*log(1-y))\n    #\n    # are two *independent* variables with normal distribution\n    # (mu = 0, sigma = 1).\n    # (Lambert Meertens)\n    # (corrected version; bug discovered by Mike Miller, fixed by LM)\n\n    # Multithreading note: When two threads call this function\n    # simultaneously, it is possible that they will receive the\n    # same return value.  The window is very small though.  To\n    # avoid this, you have to use a lock around all calls.  (I\n    # didn't want to slow this down in the serial case by using a\n    # lock here.)\n    */\n\n    var $ = $B.args('gauss', 3, {self: null, mu:null, sigma:null},\n            ['self', 'mu', 'sigma'], arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        sigma = $.sigma\n\n    var z = gauss_next\n    gauss_next = null\n    if(z === null){\n        var x2pi = self._random() * Math.PI * 2,\n            g2rad = Math.sqrt(-2.0 * Math.log(1.0 - self._random())),\n            z = Math.cos(x2pi) * g2rad\n        gauss_next = Math.sin(x2pi) * g2rad\n    }\n    return mu + z*sigma\n}\n\nRandom.getrandbits = function(){\n    var $ = $B.args(\"getrandbits\", 2,\n        {self: null, k:null},[\"self\", \"k\"],arguments, {}, null, null),\n        self = $.self,\n        k = $B.$GetInt($.k)\n    // getrandbits(k) -> x.  Generates a long int with k random bits.\n    if(k <= 0){\n        throw _b_.ValueError.$factory('number of bits must be greater than zero')\n    }\n    if(k != _b_.int.$factory(k)){\n        throw _b_.TypeError.$factory('number of bits should be an integer')\n    }\n    var numbytes = (k + 7), // bits / 8 and rounded up\n        x = _b_.int.from_bytes(Random._urandom(self, numbytes), 'big')\n    return _b_.getattr(x, '__rshift__')(\n        _b_.getattr(numbytes*8,'__sub__')(k))\n}\n\nRandom.getstate = function(){\n    // Return internal state; can be passed to setstate() later.\n    var $ = $B.args('getstate', 1, {self: null},\n        [\"self\"], arguments, {}, null, null)\n    return $.self._random.getstate()\n}\n\nRandom.lognormvariate = function(){\n    /*\n    Log normal distribution.\n\n    If you take the natural logarithm of this distribution, you'll get a\n    normal distribution with mean mu and standard deviation sigma.\n    mu can have any value, and sigma must be greater than zero.\n\n    */\n    return Math.exp(Random.normalvariate.apply(null, arguments))\n}\n\nRandom.normalvariate = function(){\n    /*\n    Normal distribution.\n\n    mu is the mean, and sigma is the standard deviation.\n\n    */\n\n    // mu = mean, sigma = standard deviation\n\n    // Uses Kinderman and Monahan method. Reference: Kinderman,\n    // A.J. and Monahan, J.F., \"Computer generation of random\n    // variables using the ratio of uniform deviates\", ACM Trans\n    // Math Software, 3, (1977), pp257-260.\n\n    var $ = $B.args(\"normalvariate\", 3,\n        {self: null, mu:null, sigma:null}, [\"self\", \"mu\", \"sigma\"],\n        arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        sigma = $.sigma\n\n    while(true){\n        var u1 = self._random(),\n            u2 = 1.0 - self._random(),\n            z = NV_MAGICCONST * (u1 - 0.5) / u2,\n            zz = z * z / 4.0\n        if(zz <= -Math.log(u2)){break}\n    }\n    return mu + z * sigma\n}\n\nRandom.paretovariate = function(){\n    /* Pareto distribution.  alpha is the shape parameter.*/\n    // Jain, pg. 495\n\n    var $ = $B.args(\"paretovariate\", 2, {self: null, alpha:null},\n        [\"self\", \"alpha\"], arguments, {}, null, null)\n\n    var u = 1 - $.self._random()\n    return 1 / Math.pow(u, 1 / $.alpha)\n}\n\nfunction is_integer(x){\n    return _b_.isinstance(x, _b_.int) || (\n        _b_.isinstance(x, _b_.float) &&\n            x.valueOf() == Math.floor(x.valueOf()))\n}\n\nRandom.randint = function(self, a, b){\n    var $ = $B.args('randint', 3,\n        {self: null, a:null, b:null},\n        ['self', 'a', 'b'],\n        arguments, {}, null, null)\n    if(! is_integer($.a)){\n        throw _b_.ValueError.$factory(\"non-integer value for start\")\n    }\n    if(! is_integer($.b)){\n        throw _b_.ValueError.$factory(\"non-integer value for stop\")\n    }\n    return Random.randrange($.self, $.a, $B.add($.b, 1))\n}\n\nRandom.random = function(self){\n    var res = self._random()\n    if(! Number.isInteger(res)){return new Number(res)}\n    return res\n}\n\nRandom.randrange = function(){\n    var $ = $B.args('randrange', 4,\n        {self: null, x:null, stop:null, step:null},\n        ['self', 'x', 'stop', 'step'],\n        arguments, {stop:null, step:null}, null, null),\n        self = $.self,\n        _random = self._random\n\n    if(! is_integer($.x)){\n        throw _b_.ValueError.$factory(\"non-integer arg 1 for randrange()\")\n    }\n    if($.stop !== null && ! is_integer($.stop)){\n        throw _b_.ValueError.$factory(\"non-integer arg 2 for randrange()\")\n    }\n    if($.step !== null && ! is_integer($.step)){\n        throw _b_.ValueError.$factory(\"non-integer arg 3 for randrange()\")\n    }\n\n    if($.stop === null){\n        var start = 0, stop = $.x.valueOf(), step = 1\n    }else{\n        var start = $.x.valueOf(), stop = $.stop.valueOf(),\n            step = $.step === null ? 1 : $.step.valueOf()\n        if(step == 0){throw _b_.ValueError.$factory('step cannot be 0')}\n    }\n\n    if((step > 0 && start >= stop) || (step < 0 && start <= stop)){\n        throw _b_.ValueError.$factory(\"empty range for randrange() (\" +\n            start + \", \" + stop + \", \" + step + \")\")\n    }\n    if(typeof start == 'number' && typeof stop == 'number' &&\n            typeof step == 'number'){\n        return start + step * Math.floor(_random() *\n            Math.ceil((stop - start) / step))\n    }else{\n        var d = _b_.getattr(stop, '__sub__')(start)\n        d = _b_.getattr(d, '__floordiv__')(step)\n        // Force d to be a LongInt\n        d = $B.long_int.$factory(d)\n        // d is a long integer with n digits ; to choose a random number\n        // between 0 and d the most simple is to take a random digit\n        // at each position, except the first one\n        var s = d.value,\n            _len = s.length,\n            res = Math.floor(_random() * (parseInt(s.charAt(0)) +\n                (_len == 1 ? 0 : 1))) + ''\n        var same_start = res.charAt(0) == s.charAt(0)\n        for(var i = 1; i < _len; i++){\n            if(same_start){\n                // If it's the last digit, don't allow stop as valid\n                if(i == _len - 1){\n                    res += Math.floor(_random() * parseInt(s.charAt(i))) + ''\n                }else{\n                    res += Math.floor(_random() *\n                        (parseInt(s.charAt(i)) + 1)) + ''\n                    same_start = res.charAt(i) == s.charAt(i)\n                }\n            }else{\n                res += Math.floor(_random() * 10) + ''\n            }\n        }\n        var offset = {__class__: $B.long_int, value: res,\n            pos: true}\n        d = _b_.getattr(step, '__mul__')(offset)\n        d = _b_.getattr(start, '__add__')(d)\n        return _b_.int.$factory(d)\n    }\n}\n\nRandom.sample = function(){\n    /*\n    Chooses k unique random elements from a population sequence or set.\n\n    Returns a new list containing elements from the population while\n    leaving the original population unchanged.  The resulting list is\n    in selection order so that all sub-slices will also be valid random\n    samples.  This allows raffle winners (the sample) to be partitioned\n    into grand prize and second place winners (the subslices).\n\n    Members of the population need not be hashable or unique.  If the\n    population contains repeats, then each occurrence is a possible\n    selection in the sample.\n\n    To choose a sample in a range of integers, use range as an argument.\n    This is especially fast and space efficient for sampling from a\n    large population:   sample(range(10000000), 60)\n\n    # Sampling without replacement entails tracking either potential\n    # selections (the pool) in a list or previous selections in a set.\n\n    # When the number of selections is small compared to the\n    # population, then tracking selections is efficient, requiring\n    # only a small set and an occasional reselection.  For\n    # a larger number of selections, the pool tracking method is\n    # preferred since the list takes less space than the\n    # set and it doesn't suffer from frequent reselections.'\n\n    */\n    var $ = $B.args('sample', 3, {self: null, population: null,k: null},\n        ['self', 'population','k'], arguments, {}, null, null),\n        self = $.self,\n        population = $.population,\n        k = $.k\n\n    if(!_b_.hasattr(population, '__len__')){\n        throw _b_.TypeError.$factory(\"Population must be a sequence or set. \" +\n            \"For dicts, use list(d).\")\n    }\n    var n = _b_.getattr(population, '__len__')()\n\n    if(k < 0 || k > n){\n        throw _b_.ValueError.$factory(\"Sample larger than population\")\n    }\n    var result = [],\n        setsize = 21        // size of a small set minus size of an empty list\n    if(k > 5){\n        setsize += Math.pow(4, Math.ceil(Math.log(k * 3, 4))) // table size for big sets\n    }\n    if(n <= setsize){\n        // An n-length list is smaller than a k-length set\n        if(Array.isArray(population)){\n            var pool = population.slice()\n        }else{var pool = _b_.list.$factory(population)}\n        for(var i = 0; i < k; i++){ //invariant:  non-selected at [0,n-i)\n            var j = Random._randbelow(self, n - i)\n            result[i] = pool[j]\n            pool[j] = pool[n - i - 1]   // move non-selected item into vacancy\n        }\n    }else{\n        selected = {}\n        for(var i = 0; i < k; i++){\n            var j = Random._randbelow(self, n)\n            while(selected[j] !== undefined){\n                j = Random._randbelow(self, n)\n            }\n            selected[j] = true\n            result[i] = Array.isArray(population) ? population[j] :\n                            _b_.getattr(population, '__getitem__')(j)\n        }\n    }\n    return result\n}\n\nRandom.seed = function(){\n    /*\n    Initialize internal state from hashable object.\n\n    None or no argument seeds from current time or from an operating\n    system specific randomness source if available.\n\n    If *a* is an int, all bits are used.\n    */\n    var $ = $B.args('seed', 3, {self: null, a: null, version: null},\n        ['self', 'a', 'version'],\n        arguments, {a: new Date(), version: 2}, null, null),\n        self = $.self,\n        a = $.a,\n        version = $.version\n\n    if(version == 1){a = _b_.hash(a)}\n    else if(version == 2){\n        if(_b_.isinstance(a, _b_.str)){\n            a = _b_.int.from_bytes(_b_.bytes.$factory(a, 'utf-8'), 'big')\n        }else if(_b_.isinstance(a, [_b_.bytes, _b_.bytearray])){\n            a = _b_.int.from_bytes(a, 'big')\n        }else if(!_b_.isinstance(a, _b_.int)){\n            throw _b_.TypeError.$factory('wrong argument')\n        }\n        if(a.__class__ === $B.long_int){\n            // In this implementation, seed() only accepts safe integers\n            // Generate a random one from the underlying string value,\n            // using an arbitrary seed (99) to always return the same\n            // integer\n            var numbers = a.value,\n                res = '',\n                pos\n            self._random.seed(99)\n            for(var i = 0; i < 17; i++){\n                pos = parseInt(self._random() * numbers.length)\n                res += numbers.charAt(pos)\n            }\n            a = parseInt(res)\n        }\n    }else{\n        throw _b_.ValueError.$factory('version can only be 1 or 2')\n    }\n\n    self._random.seed(a)\n    gauss_next = null\n}\n\nRandom.setstate = function(state){\n    // Restore internal state from object returned by getstate().\n    var $ = $B.args('setstate', 2, {self: null, state:null}, ['self', 'state'],\n        arguments, {}, null, null),\n        self = $.self\n    var state = self._random.getstate()\n    if(! Array.isArray($.state)){\n        throw _b_.TypeError.$factory('state must be a list, not ' +\n            $B.class_name($.state))\n    }\n    if($.state.length < state.length){\n        throw _b_.ValueError.$factory(\"need more than \" + $.state.length +\n            \" values to unpack\")\n    }else if($.state.length > state.length){\n        throw _b_.ValueError.$factory(\"too many values to unpack (expected \" +\n            state.length + \")\")\n    }\n    if($.state[0] != 3){\n        throw _b_.ValueError.$factory(\"ValueError: state with version \" +\n            $.state[0] + \" passed to Random.setstate() of version 3\")\n    }\n    var second = _b_.list.$factory($.state[1])\n    if(second.length !== state[1].length){\n        throw _b_.ValueError.$factory('state vector is the wrong size')\n    }\n    for(var i = 0; i < second.length; i++){\n        if(typeof second[i] != 'number'){\n            throw _b_.ValueError.$factory('state vector items must be integers')\n        }\n    }\n    self._random.setstate($.state)\n}\n\nRandom.shuffle = function(x, random){\n    /*\n    x, random = random.random -> shuffle list x in place; return None.\n\n    Optional arg random is a 0-argument function returning a random\n    float in [0.0, 1.0); by default, the standard random.random.\n    */\n\n    var $ = $B.args('shuffle', 3, {self: null, x: null, random: null},\n        ['self', 'x','random'],\n        arguments, {random: null}, null, null),\n        self = $.self,\n        x = $.x,\n        random = $.random\n\n    if(random === null){random = self._random}\n\n    if(Array.isArray(x)){\n        for(var i = x.length - 1; i >= 0;i--){\n            var j = Math.floor(random() * (i + 1)),\n                temp = x[j]\n            x[j] = x[i]\n            x[i] = temp\n        }\n    }else{\n        var len = _b_.getattr(x, '__len__')(), temp,\n            x_get = _b_.getattr(x, '__getitem__'),\n            x_set = _b_.getattr(x, '__setitem__')\n\n        for(i = len - 1; i >= 0; i--){\n            var j = Math.floor(random() * (i + 1)),\n                temp = x_get(j)\n            x_set(j, x_get(i))\n            x_set(i, temp)\n        }\n    }\n    return _b_.None\n}\n\nRandom.triangular = function(){\n    /*\n    Triangular distribution.\n\n    Continuous distribution bounded by given lower and upper limits,\n    and having a given mode value in-between.\n\n    http://en.wikipedia.org/wiki/Triangular_distribution\n    */\n    var $ = $B.args('triangular', 4,\n        {self: null, low: null, high: null, mode: null},\n        ['self', 'low', 'high', 'mode'],\n        arguments, {low: 0, high: 1, mode: null}, null, null),\n        low = $.low,\n        high = $.high,\n        mode = $.mode\n\n    var u = $.self._random(),\n        c = mode === null ? 0.5 : (mode - low) / (high - low)\n    if(u > c){\n        u = 1 - u\n        c = 1 - c\n        var temp = low\n        low = high\n        high = temp\n    }\n    return low + (high - low) * Math.pow(u * c, 0.5)\n}\n\nRandom.uniform = function(){\n    var $ = $B.args('uniform', 3, {self: null, a: null, b: null},\n        ['self', 'a', 'b'], arguments, {}, null, null),\n        a = $B.$GetInt($.a),\n        b = $B.$GetInt($.b)\n\n    return a + (b - a) * $.self._random()\n}\n\nRandom.vonmisesvariate = function(){\n    /* Circular data distribution.\n\n    mu is the mean angle, expressed in radians between 0 and 2*pi, and\n    kappa is the concentration parameter, which must be greater than or\n    equal to zero.  If kappa is equal to zero, this distribution reduces\n    to a uniform random angle over the range 0 to 2*pi.\n\n    */\n    // mu:    mean angle (in radians between 0 and 2*pi)\n    // kappa: concentration parameter kappa (>= 0)\n    // if kappa = 0 generate uniform random angle\n\n    // Based upon an algorithm published in: Fisher, N.I.,\n    // \"Statistical Analysis of Circular Data\", Cambridge\n    // University Press, 1993.\n\n    // Thanks to Magnus Kessler for a correction to the\n    // implementation of step 4.\n\n    var $ = $B.args('vonmisesvariate', 3,\n            {self: null, mu: null, kappa:null}, ['self', 'mu', 'kappa'],\n            arguments, {}, null, null),\n        self = $.self,\n        mu = $.mu,\n        kappa = $.kappa,\n        TWOPI = 2*Math.PI\n\n    if(kappa <= 1e-6){return TWOPI * self._random()}\n\n    var s = 0.5 / kappa,\n        r = s + Math.sqrt(1.0 + s * s)\n\n    while(true){\n        var u1 = self._random(),\n            z = Math.cos(Math.PI * u1),\n            d = z / (r + z),\n            u2 = self._random()\n        if((u2 < 1.0 - d * d) ||\n            (u2 <= (1.0 - d) * Math.exp(d))){\n                break\n        }\n    }\n    var q = 1.0 / r,\n        f = (q + z) / (1.0 + q * z),\n        u3 = self._random()\n    if(u3 > 0.5){var theta = (mu + Math.acos(f)) % TWOPI}\n    else{var theta = (mu - Math.acos(f)) % TWOPI}\n    return theta\n}\n\nRandom.weibullvariate = function(){\n    /*Weibull distribution.\n\n    alpha is the scale parameter and beta is the shape parameter.\n\n    */\n    // Jain, pg. 499; bug fix courtesy Bill Arms\n    var $ = $B.args(\"weibullvariate\", 3,\n        {self: null, alpha: null, beta: null},\n        [\"self\", \"alpha\", \"beta\"], arguments, {}, null, null)\n\n    var u = 1 - $.self._random()\n    return $.alpha * Math.pow(-Math.log(u), 1 / $.beta)\n}\n\n$B.set_func_names(Random, \"random\")\n\nvar $module = Random.$factory()\nfor(var attr in Random){\n    $module[attr] = (function(x){\n        return function(){return Random[x]($module, ...arguments)}\n    })(attr)\n    $module[attr].$infos = Random[attr].$infos\n}\n\n$module.Random = Random\n\nvar SystemRandom = $B.make_class(\"SystemRandom\",\n    function(){\n        return {__class__: SystemRandom}\n    }\n)\nSystemRandom.__getattribute__ = function(){\n    throw $B.builtins.NotImplementedError.$factory()\n}\n\n$module.SystemRandom = SystemRandom\n\nreturn $module\n\n})(__BRYTHON__)\n\n"], "setgame.abstractgame": [".py", "\"\"\"\ngame.py\n============================================\nBasismodule voor de logica van het spel Set.\n\"\"\"\n\nfrom .setkaart import SetKaart\nfrom .deck import Deck\n\n\nclass Game():\n    \"\"\"\n    Game class implementeert de logica van het kaartspel.\n    \"\"\"\n\n    def __init__(self, deck=None, field=None):\n        self.score = 0\n        self.deck = deck\n        self.field = field\n\n\n    def telSets(self, field):\n        \"\"\"\n        Telt het aantal sets op het veld door simpelweg alle combinaties\n        te proberen en vervolgens te delen door het aantal keer dat een\n        set is meegenomen.\n        \"\"\"\n        count = 0\n        if field.length() >= 3:\n            for c1 in field:\n                field2 = field[:]\n                field2.remove(c1)\n                for c2 in field2:\n                    field3 = field2[:]\n                    field3.remove(c2)\n                    for c3 in field3:\n                        if self.isSet(c1, c2, c3):\n                            count += 1\n        return int(count / 6)\n\n\n    def isSet(self, kaart1, kaart2, kaart3):\n        \"\"\"\n        Returnt de waarde True als kaart1, kaart2 en kaart3 een set vormen en anders returnt het de waarde False.\n        Om mee te beginnen zal het elke 3 kaarten als niet een set aanduiden (met return False).\n\n        :param kaart1: De eerste SetKaart om te vergelijken.\n        :type kaart1: SetKaart\n        :param kaart2: De tweede SetKaart om te vergelijken.\n        :type kaart2: SetKaart\n        :param kaart3: De derde SetKaart om te vergelijken.\n        :type kaart3: SetKaart\n        \"\"\"\n        return True\n\n\n    def maakSet(self, kaart1, kaart2):\n        \"\"\"\n        Returnt de vereiste kaart om een set te maken. De eigenschappen van de kaarten kun je opvragen met:\n        ``kaart1.hoeveelheid``, ``kaart1.kleur``, ``kaart1.vorm``, ``kaart1.vulling`` en ``kaart2.hoeveelheid``, ``kaart2.kleur``, ``kaart2.vorm``, ``kaart2.vulling``.\n\n        Als bijvoorbeeld ``maakSet( SetKaart(1,1,1,1), SetKaart(2,2,2,2) )`` aangeroepen wordt dan geldt:\n            kaart1.hoeveelheid = 1\n            kaart1.kleur = 1\n            kaart1.vorm = 1\n            kaart1.vulling = 1\n            en\n            kaart2.hoeveelheid = 2\n            kaart2.kleur = 2\n            kaart2.vorm = 2\n            kaart2.vulling = 2\n        \"\"\"\n\n        return SetKaart(1, 1, 1, 1)\n", ["setgame.deck", "setgame.deck.Deck", "setgame.setkaart.SetKaart", "setgame.setkaart", "setgame"]], "math": [".js", "var $module = (function($B){\n\nvar _b_ = $B.builtins,\n    $s = [],\n    i\nfor(var $b in _b_){$s.push('var ' + $b +' = _b_[\"'+$b+'\"]')}\neval($s.join(';'))\n\n//for(var $py_builtin in _b_){eval(\"var \"+$py_builtin+\"=_b_[$py_builtin]\")}\n\nvar float_check = function(x) {\n    if(x.__class__ === $B.long_int){return parseInt(x.value)}\n    return _b_.float.$factory(x)\n}\n\nfunction check_int(x){\n    if(! _b_.isinstance(x, int)){\n        throw _b_.TypeError.$factory(\"'\" + $B.class_name(x) +\n            \"' object cannot be interpreted as an integer\")\n    }\n}\n\nfunction check_int_or_round_float(x){\n    return (x instanceof Number && x == Math.floor(x)) ||\n            _b_.isinstance(x, int)\n}\n\nvar isWholeNumber = function(x){return (x * 10) % 10 == 0}\n\nvar isOdd = function(x) {return isWholeNumber(x) && 2 * Math.floor(x / 2) != x}\n\nvar isNegZero = function(x) {return x === 0 && Math.atan2(x,x) < 0}\n\nvar EPSILON = Math.pow(2, -52);\nvar MAX_VALUE = (2 - EPSILON) * Math.pow(2, 1023);\nvar MIN_VALUE = Math.pow(2, -1022);\n\nfunction nextUp(x){\n    if(x !== x){\n        return x\n    }\n    if(x === -1 / 0){\n        return -MAX_VALUE\n    }\n    if(x === +1 / 0){\n        return +1 / 0\n    }\n    if(x === +MAX_VALUE){\n        return +1 / 0\n    }\n    var y = x * (x < 0 ? 1 - EPSILON / 2 : 1 + EPSILON)\n    if(y === x){\n        y = MIN_VALUE * EPSILON > 0 ? x + MIN_VALUE * EPSILON : x + MIN_VALUE\n    }\n    if(y === +1 / 0){\n        y = +MAX_VALUE\n    }\n    var b = x + (y - x) / 2\n    if(x < b && b < y){\n        y = b;\n    }\n    var c = (y + x) / 2\n    if(x < c && c < y){\n        y = c;\n    }\n    return y === 0 ? -0 : y\n}\n\nvar _mod = {\n    __getattr__: function(attr){\n        $B.check_nb_args('__getattr__ ', 1, arguments)\n        $B.check_no_kw('__getattr__ ', attr)\n\n        var res = this[attr]\n        if(res === undefined){\n            throw _b_.AttributeError.$factory(\n                'module math has no attribute ' + attr)\n        }\n        return res\n    },\n    acos: function(x){\n        $B.check_nb_args('acos', 1, arguments)\n        $B.check_no_kw('acos', x)\n        return float.$factory(Math.acos(float_check(x)))\n    },\n    acosh: function(x){\n        $B.check_nb_args('acosh', 1, arguments)\n        $B.check_no_kw('acosh', x)\n\n        if(_b_.$isinf(x)){return float.$factory('inf')}\n        var y = float_check(x)\n        return float.$factory(Math.log(y + Math.sqrt(y * y - 1)))\n    },\n    asin: function(x){\n        $B.check_nb_args('asin', 1, arguments)\n        $B.check_no_kw('asin', x)\n        return float.$factory(Math.asin(float_check(x)))\n    },\n    asinh: function(x){\n        $B.check_nb_args('asinh', 1, arguments)\n        $B.check_no_kw('asinh', x)\n\n        if(_b_.$isninf(x)){return float.$factory('-inf')}\n        if(_b_.$isinf(x)){return float.$factory('inf')}\n        var y = float_check(x)\n        if(y == 0 && 1 / y === -Infinity){\n            return new Number(-0.0)\n        }\n        return float.$factory(Math.asinh(y))\n    },\n    atan: function(x){\n        $B.check_nb_args('atan', 1, arguments)\n        $B.check_no_kw('atan', x)\n\n        if(_b_.$isninf(x)){return float.$factory(-Math.PI / 2)}\n        if(_b_.$isinf(x)){return float.$factory(Math.PI / 2)}\n        return float.$factory(Math.atan(float_check(x)))\n    },\n    atan2: function(y, x){\n        $B.check_nb_args('atan2', 2, arguments)\n        $B.check_no_kw('atan2', y, x)\n\n        return float.$factory(Math.atan2(float_check(y), float_check(x)))\n    },\n    atanh: function(x){\n        $B.check_nb_args('atanh', 1, arguments)\n        $B.check_no_kw('atanh', x)\n\n       var y = float_check(x)\n       if(y == 0){return 0}\n       return float.$factory(0.5 * Math.log((1 / y + 1)/(1 / y - 1)));\n    },\n    ceil: function(x){\n        $B.check_nb_args('ceil', 1, arguments)\n        $B.check_no_kw('ceil', x)\n\n       try{return getattr(x, '__ceil__')()}catch(err){}\n\n       if(_b_.$isninf(x)){return float.$factory('-inf')}\n       if(_b_.$isinf(x)){return float.$factory('inf')}\n       if(isNaN(x)){return float.$factory('nan')}\n\n       var y = float_check(x)\n       if(! isNaN(parseFloat(y)) && isFinite(y)){\n           return int.$factory(Math.ceil(y))\n       }\n\n       throw _b_.ValueError.$factory(\n           'object is not a number and does not contain __ceil__')\n    },\n    comb: function(n, k){\n        $B.check_nb_args('comb', 2, arguments)\n        $B.check_no_kw('comb', n, k)\n\n        // raise TypeError if n or k is not an integer\n        check_int(n)\n        check_int(k)\n\n        if(k < 0){\n            throw _b_.ValueError.$factory(\"k must be a non-negative integer\")\n        }\n        if(n < 0){\n            throw _b_.ValueError.$factory(\"n must be a non-negative integer\")\n        }\n\n        if(k > n){\n            return 0\n        }\n        // Evaluates to n! / (k! * (n - k)!)\n        var fn = _mod.factorial(n),\n            fk = _mod.factorial(k),\n            fn_k = _mod.factorial(n - k)\n        return $B.floordiv(fn, $B.mul(fk, fn_k))\n    },\n    copysign: function(x, y){\n        $B.check_nb_args('copysign', 2, arguments)\n        $B.check_no_kw('copysign', x,y)\n\n        var x1 = Math.abs(float_check(x))\n        var y1 = float_check(y)\n        var sign = Math.sign(y1)\n        sign = (sign == 1 || Object.is(sign, +0)) ? 1 : - 1\n        return float.$factory(x1 * sign)\n    },\n    cos : function(x){\n        $B.check_nb_args('cos ', 1, arguments)\n        $B.check_no_kw('cos ', x)\n        return float.$factory(Math.cos(float_check(x)))\n    },\n    cosh: function(x){\n        $B.check_nb_args('cosh', 1, arguments)\n        $B.check_no_kw('cosh', x)\n\n        if(_b_.$isinf(x)) {return float.$factory('inf')}\n        var y = float_check(x)\n        if(Math.cosh !== undefined){return float.$factory(Math.cosh(y))}\n        return float.$factory((Math.pow(Math.E, y) +\n            Math.pow(Math.E, -y)) / 2)\n    },\n    degrees: function(x){\n        $B.check_nb_args('degrees', 1, arguments)\n        $B.check_no_kw('degrees', x)\n        return float.$factory(float_check(x) * 180 / Math.PI)\n    },\n    dist: function(p, q){\n        $B.check_nb_args('dist', 2, arguments)\n        $B.check_no_kw('dist', p, q)\n        var itp = _b_.iter(p),\n            itq = _b_.iter(q),\n            res = 0\n        while(true){\n            try{\n                var next_p = _b_.next(itp)\n            }catch(err){\n                if(err.__class__ === _b_.StopIteration){\n                    // check that the other iterator is also exhausted\n                    try{\n                        var next_q = _b_.next(itq)\n                        throw _b_.ValueError.$factory(\"both points must have \" +\n                            \"the same number of dimensions\")\n                    }catch(err){\n                        if(err.__class__ === _b_.StopIteration){\n                            if(typeof res == \"number\" || res instanceof Number){\n                                return Math.sqrt(res)\n                            }else{\n                                return Math.sqrt(parseInt(res.value))\n                            }\n                        }\n                        throw err\n                    }\n                }\n                throw err\n            }\n            try{\n                var next_q = _b_.next(itq),\n                    diff = $B.sub(next_p, next_q)\n                res = $B.add(res, $B.mul(diff, diff))\n            }catch(err){\n                if(err.__class__ === _b_.StopIteration){\n                    throw _b_.ValueError.$factory(\"both points must have \" +\n                        \"the same number of dimensions\")\n                }\n                throw err\n            }\n        }\n    },\n    e: float.$factory(Math.E),\n    erf: function(x){\n        $B.check_nb_args('erf', 1, arguments)\n        $B.check_no_kw('erf', x)\n\n        // inspired from\n        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python\n        var y = float_check(x)\n        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))\n        var ans = 1 - t * Math.exp( -y * y - 1.26551223 +\n                     t * ( 1.00002368 +\n                     t * ( 0.37409196 +\n                     t * ( 0.09678418 +\n                     t * (-0.18628806 +\n                     t * ( 0.27886807 +\n                     t * (-1.13520398 +\n                     t * ( 1.48851587 +\n                     t * (-0.82215223 +\n                     t * 0.17087277)))))))))\n        if(y >= 0.0){return ans}\n        return -ans\n    },\n    erfc: function(x){\n\n        $B.check_nb_args('erfc', 1, arguments)\n        $B.check_no_kw('erfc', x)\n\n        // inspired from\n        // http://stackoverflow.com/questions/457408/is-there-an-easily-available-implementation-of-erf-for-python\n        var y = float_check(x)\n        var t = 1.0 / (1.0 + 0.5 * Math.abs(y))\n        var ans = 1 - t * Math.exp( -y * y - 1.26551223 +\n                     t * ( 1.00002368 +\n                     t * ( 0.37409196 +\n                     t * ( 0.09678418 +\n                     t * (-0.18628806 +\n                     t * ( 0.27886807 +\n                     t * (-1.13520398 +\n                     t * ( 1.48851587 +\n                     t * (-0.82215223 +\n                     t * 0.17087277)))))))))\n        if(y >= 0.0){return 1 - ans}\n        return 1 + ans\n    },\n    exp: function(x){\n        $B.check_nb_args('exp', 1, arguments)\n        $B.check_no_kw('exp', x)\n\n         if(_b_.$isninf(x)){return float.$factory(0)}\n         if(_b_.$isinf(x)){return float.$factory('inf')}\n         var _r = Math.exp(float_check(x))\n         if(_b_.$isinf(_r)){throw _b_.OverflowError.$factory(\"math range error\")}\n         return float.$factory(_r)\n    },\n    expm1: function(x){\n        $B.check_nb_args('expm1', 1, arguments)\n        $B.check_no_kw('expm1', x)\n\n         if(_b_.$isninf(x)){return float.$factory(0)}\n         if(_b_.$isinf(x)){return float.$factory('inf')}\n         var _r = Math.expm1(float_check(x))\n         if(_b_.$isinf(_r)){throw _b_.OverflowError.$factory(\"math range error\")}\n         return float.$factory(_r)\n    },\n    //fabs: function(x){ return x>0?float.$factory(x):float.$factory(-x)},\n    fabs: function(x){\n        $B.check_nb_args('fabs', 1, arguments)\n        $B.check_no_kw('fabs', x)\n        return _b_.$fabs(x) // located in py_float.js\n    },\n    factorial: function(x){\n        $B.check_nb_args('factorial', 1, arguments)\n        $B.check_no_kw('factorial', x)\n\n         //using code from http://stackoverflow.com/questions/3959211/fast-factorial-function-in-javascript\n         if(! check_int_or_round_float(x)){\n             throw _b_.ValueError.$factory(\"factorial() only accepts integral values\")\n         }else if($B.rich_comp(\"__lt__\", x, 0)){\n             throw _b_.ValueError.$factory(\"factorial() not defined for negative values\")\n         }\n         var r = 1\n         for(var i = 2; i <= x; i++){\n             r = $B.mul(r, i)\n         }\n         return r\n    },\n    floor: function(x){\n        $B.check_nb_args('floor', 1, arguments)\n        $B.check_no_kw('floor', x)\n        return Math.floor(float_check(x))\n    },\n    fmod: function(x,y){\n        $B.check_nb_args('fmod', 2, arguments)\n        $B.check_no_kw('fmod', x,y)\n        return float.$factory(float_check(x) % float_check(y))\n    },\n    frexp: function(x){\n        $B.check_nb_args('frexp', 1, arguments)\n        $B.check_no_kw('frexp', x)\n\n        var _l = _b_.$frexp(x)\n        return _b_.tuple.$factory([float.$factory(_l[0]), _l[1]])\n    },\n    fsum: function(x){\n        $B.check_nb_args('fsum', 1, arguments)\n        $B.check_no_kw('fsum', x)\n\n        /* Translation into Javascript of the function msum in an Active\n           State Cookbook recipe : https://code.activestate.com/recipes/393090/\n           by Raymond Hettinger\n        */\n        var partials = [],\n            res = new Number(),\n            _it = _b_.iter(x)\n        while(true){\n            try{\n                var x = _b_.next(_it),\n                    i = 0\n                for(var j = 0, len = partials.length; j < len; j++){\n                    var y = partials[j]\n                    if(Math.abs(x) < Math.abs(y)){\n                        var z = x\n                        x = y\n                        y = z\n                    }\n                    var hi = x + y,\n                        lo = y - (hi - x)\n                    if(lo){\n                        partials[i] = lo\n                        i++\n                    }\n                    x = hi\n                }\n                partials = partials.slice(0, i).concat([x])\n            }catch(err){\n                if(_b_.isinstance(err, _b_.StopIteration)){break}\n                throw err\n            }\n        }\n        var res = new Number(0)\n        for(var i = 0; i < partials.length; i++){\n            res += new Number(partials[i])\n        }\n        return new Number(res)\n    },\n    gamma: function(x){\n        $B.check_nb_args('gamma', 1, arguments)\n        $B.check_no_kw('gamma', x)\n\n        if(_b_.isinstance(x, int)){\n            if(i < 1){\n                throw _b_.ValueError.$factory(\"math domain error\")\n            }\n            var res = 1\n            for(var i = 1; i < x; i++){res *= i}\n            return new Number(res)\n        }\n        // Adapted from https://en.wikipedia.org/wiki/Lanczos_approximation\n        var p = [676.5203681218851,\n            -1259.1392167224028,\n            771.32342877765313,\n            -176.61502916214059,\n            12.507343278686905,\n            -0.13857109526572012,\n            9.9843695780195716e-6,\n            1.5056327351493116e-7\n            ]\n\n        var EPSILON = 1e-07\n        function drop_imag(z){\n            if(Math.abs(z.imag) <= EPSILON){\n                z = z.real\n            }\n            return z\n        }\n        var z = x\n        if(z < 0.5){\n            var y = Math.PI / (Math.sin(Math.PI * z) * _mod.gamma(1-z)) // Reflection formula\n        }else{\n            z -= 1\n            var x = 0.99999999999980993,\n                i = 0\n            for(var i = 0, len = p.length; i < len; i++){\n                var pval = p[i]\n                x += pval / (z + i + 1)\n            }\n            var t = z + p.length - 0.5,\n                sq = Math.sqrt(2 * Math.PI),\n                y = sq * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x\n        }\n        return drop_imag(y)\n    },\n    gcd: function(){\n        var $ = $B.args(\"gcd\", 2, {a: null, b: null}, ['a', 'b'],\n                arguments, {}, null, null),\n            a = $B.PyNumber_Index($.a),\n            b = $B.PyNumber_Index($.b)\n        if(a == 0 && b == 0){return 0}\n        // https://stackoverflow.com/questions/17445231/js-how-to-find-the-greatest-common-divisor\n        a = _b_.abs(a)\n        b = _b_.abs(b)\n        if($B.rich_comp(\"__gt__\", b, a)){\n            var temp = a\n            a = b\n            b = temp\n        }\n        while(true){\n            if(b == 0){\n                return a\n            }\n            a = $B.rich_op(\"mod\", a, b)\n            if(a == 0){\n                return b\n            }\n            b = $B.rich_op(\"mod\", b, a)\n        }\n    },\n    hypot: function(x, y){\n        var $ = $B.args(\"hypot\", 2, {x: null, y:null}, ['x', 'y'],\n                    arguments, {}, \"args\", null),\n            args = [x, y].concat($.args),\n            res = 0\n        return float.$factory(Math.hypot(...args))\n    },\n    inf: float.$factory('inf'),\n    isclose: function(){\n        var $ns = $B.args(\"isclose\",\n                          4,\n                          {a: null, b: null, rel_tol: null, abs_tol: null},\n                          ['a', 'b', 'rel_tol', 'abs_tol'],\n                          arguments,\n                          {rel_tol: 1e-09, abs_tol: 0.0},\n                          '*',\n                          null)\n        var a = $ns['a'],\n            b = $ns['b'],\n            rel_tol = $ns['rel_tol'],\n            abs_tol = $ns['abs_tol']\n        if(rel_tol < 0.0 || abs_tol < 0.0){\n            throw ValueError.$factory('tolerances must be non-negative')\n        }\n        if(typeof a !== \"number\" || typeof b !== \"number\"){\n            if(! _b_.isinstance(a, [_b_.float, _b_.int]) ||\n                    ! _b_.isinstance(b, [_b_.float, _b_.int])){\n                throw _b_.TypeError.$factory(\"must be real number, not str\")\n            }\n        }\n        if(a == b){\n            return True\n        }\n        if(_b_.$isinf(a) || _b_.$isinf(b)){\n            return a === b\n        }\n        var diff = _b_.$fabs(b - a)\n        var result = (\n            (diff <= _b_.$fabs(rel_tol * b)) ||\n                (diff <= _b_.$fabs(rel_tol * a))\n            ) || (diff <= _b_.$fabs(abs_tol)\n        )\n        return result\n    },\n    isfinite: function(x){\n        $B.check_nb_args('isfinite', 1, arguments)\n        $B.check_no_kw('isfinite', x)\n        return isFinite(float_check(x))\n    },\n    isinf: function(x){\n        $B.check_nb_args('isinf', 1, arguments)\n        $B.check_no_kw('isinf', x)\n        return _b_.$isinf(float_check(x))\n    },\n    isnan: function(x){\n        $B.check_nb_args('isnan', 1, arguments)\n        $B.check_no_kw('isnan', x)\n        return isNaN(float_check(x))\n    },\n    isqrt: function(x){\n        $B.check_nb_args('isqrt', 1, arguments)\n        $B.check_no_kw('isqrt', x)\n\n        x = $B.PyNumber_Index(x)\n        if($B.rich_comp(\"__lt__\", x, 0)){\n            throw _b_.ValueError.$factory(\n                \"isqrt() argument must be nonnegative\")\n        }\n        if(typeof x == \"number\"){\n            return Math.floor(Math.sqrt(x))\n        }else{ // big integer\n            var v = parseInt(x.value),\n                candidate = Math.floor(Math.sqrt(v)),\n                c1\n            // Use successive approximations : sqr = (sqr + (x / sqr)) / 2\n            // Limit to 100 iterations\n            for(var i = 0; i < 100; i++){\n                c1 = $B.floordiv($B.add(candidate,\n                    $B.floordiv(x, candidate)), 2)\n                if(c1 === candidate || c1.value === candidate.value){\n                    break\n                }\n                candidate = c1\n            }\n            if($B.rich_comp(\"__gt__\", $B.mul(candidate, candidate), x)){\n                // Result might be greater by 1\n                candidate = $B.sub(candidate, 1)\n            }\n            return candidate\n        }\n    },\n    lcm: function(){\n        var $ = $B.args(\"lcm\", 0, {}, [], arguments, {}, 'args', null),\n            product = 1\n        for(var arg of $.args){\n            product = $B.mul(product, $B.PyNumber_Index(arg))\n        }\n        var gcd = $module.gcd.apply(null, arguments)\n        return $B.$getattr(product, \"__floordiv__\")(gcd)\n    },\n    ldexp: function(x, i){\n        $B.check_nb_args('ldexp', 2, arguments)\n        $B.check_no_kw('ldexp', x, i)\n        return _b_.$ldexp(x, i)   //located in py_float.js\n    },\n    lgamma: function(x){\n        $B.check_nb_args('lgamma', 1, arguments)\n        $B.check_no_kw('lgamma', x)\n\n        return new Number(Math.log(Math.abs(_mod.gamma(x))))\n    },\n    log: function(x, base){\n        var $ = $B.args(\"log\", 2, {x: null, base: null}, ['x', 'base'],\n            arguments, {base: _b_.None}, null, null),\n            x = $.x,\n            base = $.base\n\n         var x1 = float_check(x)\n         if(base === _b_.None){return float.$factory(Math.log(x1))}\n         return float.$factory(Math.log(x1) / Math.log(float_check(base)))\n    },\n    log1p: function(x){\n        $B.check_nb_args('log1p', 1, arguments)\n        $B.check_no_kw('log1p', x)\n        return float.$factory(Math.log1p(float_check(x)))\n    },\n    log2: function(x){\n        $B.check_nb_args('log2', 1, arguments)\n        $B.check_no_kw('log2', x)\n\n        if(isNaN(x)){return float.$factory('nan')}\n        if(_b_.$isninf(x)) {throw ValueError.$factory('')}\n        var x1 = float_check(x)\n        if(x1 < 0.0){throw ValueError.$factory('')}\n        return float.$factory(Math.log(x1) / Math.LN2)\n    },\n    log10: function(x){\n        $B.check_nb_args('log10', 1, arguments)\n        $B.check_no_kw('log10', x)\n\n        return float.$factory(Math.log10(float_check(x)))\n    },\n    modf: function(x){\n        $B.check_nb_args('modf', 1, arguments)\n        $B.check_no_kw('modf', x)\n\n       if(_b_.$isninf(x)){\n           return _b_.tuple.$factory([0.0, float.$factory('-inf')])\n       }\n       if(_b_.$isinf(x)){\n           return _b_.tuple.$factory([0.0, float.$factory('inf')])\n       }\n       if(isNaN(x)){\n           return _b_.tuple.$factory([float.$factory('nan'),\n               float.$factory('nan')])\n       }\n\n       var x1 = float_check(x)\n       if(x1 > 0){\n          var i = float.$factory(x1 - Math.floor(x1))\n          return _b_.tuple.$factory([i, float.$factory(x1 - i)])\n       }\n\n       var x2 = Math.ceil(x1)\n       var i = float.$factory(x1 - x2)\n       return _b_.tuple.$factory([i, float.$factory(x2)])\n    },\n    nan: float.$factory('nan'),\n    nextafter: function(){\n        var $ = $B.args(\"nextafter\", 2, {x: null, y: null}, ['x', 'y'],\n                    arguments, {}, null, null),\n            x = $.x,\n            y = $.y\n\n        return y < x ? -nextUp(-x) : (y > x ? nextUp(x) : (x !== x ? x : y))\n    },\n    perm: function(n, k){\n        var $ = $B.args(\"perm\", 2, {n: null, k: null}, ['n', 'k'],\n                        arguments, {k: _b_.None}, null, null),\n            n = $.n,\n            k = $.k\n\n        if(k === _b_.None){\n            check_int(n)\n            return _mod.factorial(n)\n        }\n        // raise TypeError if n or k is not an integer\n        check_int(n)\n        check_int(k)\n\n        if(k < 0){\n            throw _b_.ValueError.$factory(\"k must be a non-negative integer\")\n        }\n        if(n < 0){\n            throw _b_.ValueError.$factory(\"n must be a non-negative integer\")\n        }\n\n        if(k > n){\n            return 0\n        }\n        // Evaluates to n! / (n - k)!\n        var fn = _mod.factorial(n),\n            fn_k = _mod.factorial(n - k)\n        return $B.floordiv(fn, fn_k)\n    },\n    pi : float.$factory(Math.PI),\n    pow: function(x, y){\n        $B.check_nb_args('pow', 2, arguments)\n        $B.check_no_kw('pow', x,y)\n\n        var x1 = float_check(x)\n        var y1 = float_check(y)\n        if(y1 == 0){return float.$factory(1)}\n        if(x1 == 0 && y1 < 0){throw _b_.ValueError.$factory('')}\n\n        if(isNaN(y1)){\n            if(x1 == 1){return float.$factory(1)}\n            return float.$factory('nan')\n        }\n        if(x1 == 0){return float.$factory(0)}\n\n        if(_b_.$isninf(y)){\n            if(x1 == 1 || x1 == -1){return float.$factory(1)}\n            if(x1 < 1 && x1 > -1){return float.$factory('inf')}\n            return float.$factory(0)\n        }\n        if(_b_.$isinf(y)){\n            if(x1 == 1 || x1 == -1){return float.$factory(1)}\n            if(x1 < 1 && x1 > -1){return float.$factory(0)}\n            return float.$factory('inf')\n        }\n\n        if(isNaN(x1)){return float.$factory('nan')}\n        if(_b_.$isninf(x)){\n            if(y1 > 0 && isOdd(y1)){return float.$factory('-inf')}\n            if(y1 > 0){return float.$factory('inf')}  // this is even or a float\n            if(y1 < 0){return float.$factory(0)}\n            return float.$factory(1)\n        }\n\n        if(_b_.$isinf(x)){\n            if(y1 > 0){return float.$factory('inf')}\n            if(y1 < 0){return float.$factory(0)}\n            return float.$factory(1)\n        }\n\n        var r = Math.pow(x1, y1)\n        if(isNaN(r)){return float.$factory('nan')}\n        if(_b_.$isninf(r)){return float.$factory('-inf')}\n        if(_b_.$isinf(r)){return float.$factory('inf')}\n\n        return r\n    },\n    prod: function(){\n        var $ = $B.args(\"prod\", 1, {iterable:null, start:null},\n                        [\"iterable\", \"start\"], arguments, {start: 1}, \"*\",\n                        null),\n            iterable = $.iterable,\n            start = $.start\n        var res = start,\n            it = _b_.iter(iterable),\n            x\n        while(true){\n            try{\n                x = _b_.next(it)\n                if(x == 0){\n                    return 0\n                }\n                res = $B.mul(res, x)\n            }catch(err){\n                if(err.__class__ === _b_.StopIteration){\n                    return res\n                }\n                throw err\n            }\n        }\n    },\n    radians: function(x){\n        $B.check_nb_args('radians', 1, arguments)\n        $B.check_no_kw('radians', x)\n\n        return float.$factory(float_check(x) * Math.PI / 180)\n    },\n    sin : function(x){\n        $B.check_nb_args('sin ', 1, arguments)\n        $B.check_no_kw('sin ', x)\n        return float.$factory(Math.sin(float_check(x)))},\n    sinh: function(x) {\n        $B.check_nb_args('sinh', 1, arguments)\n        $B.check_no_kw('sinh', x)\n\n        var y = float_check(x)\n        if(Math.sinh !== undefined){return float.$factory(Math.sinh(y))}\n        return float.$factory(\n            (Math.pow(Math.E, y) - Math.pow(Math.E, -y)) / 2)\n    },\n    sqrt: function(x){\n        $B.check_nb_args('sqrt ', 1, arguments)\n        $B.check_no_kw('sqrt ', x)\n\n      var y = float_check(x)\n      if(y < 0){throw ValueError.$factory(\"math range error\")}\n      if(_b_.$isinf(y)){return float.$factory('inf')}\n      var _r = Math.sqrt(y)\n      if(_b_.$isinf(_r)){throw _b_.OverflowError.$factory(\"math range error\")}\n      return float.$factory(_r)\n    },\n    tan: function(x) {\n        $B.check_nb_args('tan', 1, arguments)\n        $B.check_no_kw('tan', x)\n\n        var y = float_check(x)\n        return float.$factory(Math.tan(y))\n    },\n    tanh: function(x) {\n        $B.check_nb_args('tanh', 1, arguments)\n        $B.check_no_kw('tanh', x)\n\n        var y = float_check(x)\n        if(Math.tanh !== undefined){return float.$factory(Math.tanh(y))}\n        return float.$factory((Math.pow(Math.E, y) - Math.pow(Math.E, -y))/\n             (Math.pow(Math.E, y) + Math.pow(Math.E, -y)))\n    },\n    tau: 6.283185307179586,\n    trunc: function(x) {\n        $B.check_nb_args('trunc', 1, arguments)\n        $B.check_no_kw('trunc', x)\n\n       try{return getattr(x, '__trunc__')()}catch(err){}\n       var x1 = float_check(x)\n       if(!isNaN(parseFloat(x1)) && isFinite(x1)){\n          if(Math.trunc !== undefined){return int.$factory(Math.trunc(x1))}\n          if(x1 > 0){return int.$factory(Math.floor(x1))}\n          return int.$factory(Math.ceil(x1))  // x1 < 0\n       }\n       throw _b_.ValueError.$factory(\n           'object is not a number and does not contain __trunc__')\n    },\n    ulp: function(){\n        var $ = $B.args(\"ulp\", 1, {x: null}, ['x'], arguments, {}, null, null),\n            x = $.x\n        return x > 0 ? nextUp(x) - x : x - (-nextUp(-x))\n    }\n}\n\nfor(var $attr in _mod){\n    if(typeof _mod[$attr] === 'function'){\n        _mod[$attr].__class__ = $B.builtin_function\n    }\n}\n\nreturn _mod\n\n})(__BRYTHON__)\n"], "browser.timer": [".py", "from browser import console,window\n\ndef wrap(func):\n\n\n def f(*args,**kw):\n  try :\n   return func(*args,**kw)\n  except Exception as exc:\n   msg=''\n   try :\n    if exc.args:\n     msg='{0.info}\\n{0.__class__.__name__}: {0.args[0]}'.format(exc)\n    else :\n     msg=str(exc)\n    import sys\n    sys.stderr.write(msg)\n   except Exception as exc2:\n    console.log(\"Error printing exception traceback\",exc2,func,\n    args,kw)\n return f\n \nclear_interval=window.clearInterval\n\nclear_timeout=window.clearTimeout\n\ndef set_interval(func,interval):\n return window.setInterval(wrap(func),interval)\n \ndef set_timeout(func,interval,*args):\n return int(window.setTimeout(wrap(func),interval,*args))\n \ndef request_animation_frame(func):\n return int(window.requestAnimationFrame(func))\n \ndef cancel_animation_frame(int_id):\n window.cancelAnimationFrame(int_id)\n \ndef set_loop_timeout(x):\n\n assert isinstance(x,int)\n __BRYTHON__.loop_timeout=x\n", ["browser.console", "browser", "sys", "browser.window"]], "setgame.setkaart": [".py", "\"\"\"SetKaart\"\"\"\n\n\nclass SetKaart():\n    \"\"\"\n    Class to keep track of card properties.\n\n    Elke kaart heeft 4 eigenschappen, te weten een *hoeveelheid*, een *kleur*, een *vorm* en een *vulling*. Van elke eigenschap zijn er 3 varianten. In plaats van tekst gebruiken we het getal 1, 2 of 3 om deze eigenschap te onthouden. Een hele kaart wordt dan een verzameling van 4 getallen 1, 2 of 3.\n\n    :param hoeveelheid: 1 (een), 2 (twee), 3 (drie)\n    :type  hoeveelheid: int\n    :param kleur:       1 (rood), 2 (paars), 3 (groen)\n    :type  kleur:       int\n    :param vorm:        1 (ovaal), 2 (ruit), 3 (golf)\n    :type  vorm:        int\n    :param vulling:     1 (vol), 2 (halfvol), 3 (leeg)\n    :type  vulling:     int\n    \"\"\"\n\n    def __init__(self, hoeveelheid, kleur, vorm, vulling):\n        self.hoeveelheid = hoeveelheid\n        self.kleur = kleur\n        self.vorm = vorm\n        self.vulling = vulling\n\n\n    def __str__(self):\n        sb = []\n        for key in self.__dict__:\n            sb.append('{key}={value}'.format(key=key, value=self.__dict__[key]))\n        return ', '.join(sb)\n\n\n    def __setitem__(self, key,value):\n        self.__dict__[key] = value\n\n\n    def __getitem__(self, key):\n        return self.__dict__[key]\n\n\n    def __len__(self):\n        return len(self.__dict__)\n\n\n    def __eq__(self, other):\n        if isinstance(self, other.__class__):\n            return self.__dict__ == other.__dict__\n        else:\n            return False\n\n\n    def __setattr__(self, key,value):\n        self.__dict__[key] = value\n\n\n    def __repr__(self):\n        sb = [\n            self.hoeveelheid,\n            self.kleur,\n            self.vorm,\n            self.vulling\n        ]\n        return str(sb)\n", []]}
__BRYTHON__.update_VFS(scripts)